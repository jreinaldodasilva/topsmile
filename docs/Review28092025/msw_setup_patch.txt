--- a/src/setupTests.ts
+++ b/src/setupTests.ts
@@ -1,8 +1,15 @@
 // Polyfills must be loaded before any other imports
 import './textEncoderPolyfill';
-import type { SetupServerApi } from 'msw/node';
 import '@testing-library/jest-dom';
 
-const server: SetupServerApi = require('./mocks/server').server;
+// Import MSW server
+import { server } from './mocks/server';
+
+// Ensure clean state between tests
+beforeAll(() => {
+  // Establish API mocking before all tests
+  server.listen({ onUnhandledRequest: 'error' });
+});
 
-// Establish API mocking before all tests.
-beforeAll(() => server.listen?.());
@@ -10,7 +17,10 @@ beforeAll(() => server.listen?.());
 // Reset any request handlers that we may add during the tests,
 // so they don't affect other tests.
-afterEach(() => server.resetHandlers?.());
+afterEach(() => {
+  server.resetHandlers();
+  // Clear any test-specific localStorage/sessionStorage
+  localStorage.clear();
+});
 
 // Clean up after the tests are finished.
-afterAll(() => server.close?.());
+afterAll(() => server.close());

--- a/src/tests/utils/test-utils.tsx
+++ b/src/tests/utils/test-utils.tsx
@@ -4,6 +4,10 @@ import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
 import { BrowserRouter } from 'react-router-dom';
 import { AuthProvider } from '../../contexts/AuthContext';
 import { PatientAuthProvider } from '../../contexts/PatientAuthContext';
 import { ErrorProvider } from '../../contexts/ErrorContext';
+
+// Create a fresh query client for each test to avoid state leakage
+const createTestQueryClient = () => new QueryClient({
+  defaultOptions: {
+    queries: { retry: false, cacheTime: 0 },
+    mutations: { retry: false }
+  }
+});

-const queryClient = new QueryClient({
-  defaultOptions: {
-    queries: {
-      retry: false,
-    },
-  },
-});
-
 const AllTheProviders = ({ children }: { children: React.ReactNode }) => {
+  const queryClient = createTestQueryClient();
+  
   return (
     <QueryClientProvider client={queryClient}>
       <BrowserRouter>