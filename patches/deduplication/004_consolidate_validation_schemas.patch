diff --git a/backend/src/utils/validators.ts b/backend/src/utils/validators.ts
new file mode 100644
index 0000000..def456
--- /dev/null
+++ b/backend/src/utils/validators.ts
@@ -0,0 +1,65 @@
+// backend/src/utils/validators.ts
+export const commonValidators = {
+  email: {
+    validator: function (email: string) {
+      return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
+    },
+    message: 'E-mail inválido'
+  },
+
+  phone: {
+    validator: function (phone: string) {
+      // Brazilian phone format: (11) 99999-9999 or 11999999999
+      return /^(\(?\d{2}\)?\s?)?\d{4,5}-?\d{4}$/.test(phone);
+    },
+    message: 'Telefone inválido'
+  },
+
+  cpf: {
+    validator: function (cpf: string) {
+      // Basic CPF format validation
+      return /^\d{3}\.\d{3}\.\d{3}-\d{2}$|^\d{11}$/.test(cpf);
+    },
+    message: 'CPF inválido'
+  },
+
+  zipCode: {
+    validator: function (zipCode: string) {
+      // Brazilian ZIP code format: 12345-678 or 12345678
+      return /^\d{5}-?\d{3}$/.test(zipCode);
+    },
+    message: 'CEP inválido'
+  }
+};
+
+export const requiredMessage = (field: string) => [true, `${field} é obrigatório`];
+
+export const minLengthMessage = (field: string, min: number) => 
+  [min, `${field} deve ter pelo menos ${min} caracteres`];
+
+export const maxLengthMessage = (field: string, max: number) => 
+  [max, `${field} deve ter no máximo ${max} caracteres`];
+
+// Common schema field definitions
+export const commonFields = {
+  email: {
+    type: String,
+    required: requiredMessage('E-mail'),
+    unique: true,
+    trim: true,
+    lowercase: true,
+    validate: commonValidators.email
+  },
+
+  name: {
+    type: String,
+    required: requiredMessage('Nome'),
+    trim: true,
+    minlength: minLengthMessage('Nome', 2),
+    maxlength: maxLengthMessage('Nome', 100)
+  },
+
+  phone: {
+    type: String,
+    validate: commonValidators.phone
+  }
+};