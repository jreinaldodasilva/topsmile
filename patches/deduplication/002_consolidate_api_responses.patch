diff --git a/backend/src/utils/responseHelpers.ts b/backend/src/utils/responseHelpers.ts
new file mode 100644
index 0000000..abcd123
--- /dev/null
+++ b/backend/src/utils/responseHelpers.ts
@@ -0,0 +1,45 @@
+// backend/src/utils/responseHelpers.ts
+import { Response } from 'express';
+
+export interface ApiResponseMeta {
+  timestamp?: string;
+  requestId?: string;
+  pagination?: any;
+}
+
+export class ApiResponse {
+  static success<T>(res: Response, data?: T, message?: string, meta?: ApiResponseMeta): Response {
+    return res.json({
+      success: true,
+      data,
+      message,
+      meta: {
+        timestamp: new Date().toISOString(),
+        ...meta
+      }
+    });
+  }
+
+  static error(res: Response, status: number, message: string, code?: string, errors?: any[]): Response {
+    return res.status(status).json({
+      success: false,
+      message,
+      code,
+      errors,
+      meta: {
+        timestamp: new Date().toISOString()
+      }
+    });
+  }
+
+  static unauthorized(res: Response, message = 'Unauthorized', code = 'UNAUTHORIZED'): Response {
+    return ApiResponse.error(res, 401, message, code);
+  }
+
+  static forbidden(res: Response, message = 'Access forbidden', code = 'FORBIDDEN'): Response {
+    return ApiResponse.error(res, 403, message, code);
+  }
+
+  static notFound(res: Response, resource = 'Resource', code = 'NOT_FOUND'): Response {
+    return ApiResponse.error(res, 404, `${resource} not found`, code);
+  }
+
+  static validation(res: Response, errors: any[], message = 'Validation failed'): Response {
+    return ApiResponse.error(res, 400, message, 'VALIDATION_ERROR', errors);
+  }
+
+  static conflict(res: Response, message: string, code = 'CONFLICT'): Response {
+    return ApiResponse.error(res, 409, message, code);
+  }
+
+  static internal(res: Response, message = 'Internal server error', code = 'INTERNAL_ERROR'): Response {
+    return ApiResponse.error(res, 500, message, code);
+  }
+}