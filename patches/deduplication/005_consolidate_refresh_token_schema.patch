diff --git a/backend/src/models/base/BaseRefreshToken.ts b/backend/src/models/base/BaseRefreshToken.ts
new file mode 100644
index 0000000..ghi789
--- /dev/null
+++ b/backend/src/models/base/BaseRefreshToken.ts
@@ -0,0 +1,55 @@
+// backend/src/models/base/BaseRefreshToken.ts
+import mongoose, { Document, Schema } from 'mongoose';
+
+export interface BaseRefreshTokenConfig {
+  userField: string;
+  userRef: string;
+  collectionName: string;
+}
+
+export interface IBaseRefreshToken extends Document {
+  token: string;
+  expiresAt: Date;
+  isRevoked: boolean;
+  deviceInfo?: {
+    userAgent?: string;
+    ipAddress?: string;
+    deviceId?: string;
+  };
+  createdAt: Date;
+  updatedAt: Date;
+}
+
+export function createRefreshTokenSchema(config: BaseRefreshTokenConfig) {
+  const schema = new Schema({
+    token: {
+      type: String,
+      required: true,
+      unique: true,
+      index: true
+    },
+    [config.userField]: {
+      type: Schema.Types.ObjectId,
+      ref: config.userRef,
+      required: true,
+      index: true
+    },
+    expiresAt: {
+      type: Date,
+      required: true
+    },
+    isRevoked: {
+      type: Boolean,
+      default: false,
+      index: true
+    },
+    deviceInfo: {
+      userAgent: String,
+      ipAddress: String,
+      deviceId: String
+    }
+  }, {
+    timestamps: true
+  });
+
+  // TTL index for automatic cleanup
+  schema.index({ expiresAt: 1 }, { expireAfterSeconds: 0 });
+
+  // Compound index for active token queries
+  schema.index({ [config.userField]: 1, isRevoked: 1 });
+
+  return schema;
+}
+
+export function createRefreshTokenModel<T extends IBaseRefreshToken>(
+  config: BaseRefreshTokenConfig
+): mongoose.Model<T> {
+  const schema = createRefreshTokenSchema(config);
+  return mongoose.model<T>(config.collectionName, schema);
+}

diff --git a/backend/src/models/RefreshToken.ts b/backend/src/models/RefreshToken.ts
index abc123..def456 100644
--- a/backend/src/models/RefreshToken.ts
+++ b/backend/src/models/RefreshToken.ts
@@ -1,70 +1,15 @@
-// backend/src/models/RefreshToken.ts
-import mongoose, { Document, Schema } from 'mongoose';
-import type { User } from '@topsmile/types';
+// backend/src/models/RefreshToken.ts - REFACTORED
+import mongoose from 'mongoose';
+import { createRefreshTokenModel, IBaseRefreshToken } from './base/BaseRefreshToken';
 
-
-export interface IRefreshToken extends Document {
-    token: string;
-    userId: mongoose.Types.ObjectId | any;
-    expiresAt: Date;
-    isRevoked: boolean;
-    deviceInfo?: {
-        userAgent?: string;
-        ipAddress?: string;
-        deviceId?: string;
-    };
-    createdAt: Date;
-    updatedAt: Date;
+export interface IRefreshToken extends IBaseRefreshToken {
+  userId: mongoose.Types.ObjectId | any;
 }
 
-const RefreshTokenSchema = new Schema<IRefreshToken>({
-    token: {
-        type: String,
-        required: true,
-        unique: true,
-        index: true
-    },
-    userId: {
-        type: Schema.Types.ObjectId,
-        ref: 'User',
-        required: true,
-        index: true
-    },
-    expiresAt: {
-        type: Date,
-        required: true
-    },
-    isRevoked: {
-        type: Boolean,
-        default: false,
-        index: true
-    },
-    deviceInfo: {
-        userAgent: String,
-        ipAddress: String,
-        deviceId: String
-    }
-}, {
-    timestamps: true
+export const RefreshToken = createRefreshTokenModel<IRefreshToken>({
+  userField: 'userId',
+  userRef: 'User',
+  collectionName: 'RefreshToken'
 });
 
-// TTL index for automatic cleanup
-RefreshTokenSchema.index({ expiresAt: 1 }, { expireAfterSeconds: 0 });
-
-// Compound index for active token queries
-RefreshTokenSchema.index({ userId: 1, isRevoked: 1 });
-
-export const RefreshToken = mongoose.model<IRefreshToken>('RefreshToken', RefreshTokenSchema);

diff --git a/backend/src/models/PatientRefreshToken.ts b/backend/src/models/PatientRefreshToken.ts
index xyz789..abc123 100644
--- a/backend/src/models/PatientRefreshToken.ts
+++ b/backend/src/models/PatientRefreshToken.ts
@@ -1,70 +1,15 @@
-// backend/src/models/PatientRefreshToken.ts
-import mongoose, { Document, Schema } from 'mongoose';
+// backend/src/models/PatientRefreshToken.ts - REFACTORED
+import mongoose from 'mongoose';
+import { createRefreshTokenModel, IBaseRefreshToken } from './base/BaseRefreshToken';
 
-export interface IPatientRefreshToken extends Document {
-    token: string;
-    patientUserId: mongoose.Types.ObjectId | any;
-    expiresAt: Date;
-    isRevoked: boolean;
-    deviceInfo?: {
-        userAgent?: string;
-        ipAddress?: string;
-        deviceId?: string;
-    };
-    createdAt: Date;
-    updatedAt: Date;
+export interface IPatientRefreshToken extends IBaseRefreshToken {
+  patientUserId: mongoose.Types.ObjectId | any;
 }
 
-const PatientRefreshTokenSchema = new Schema<IPatientRefreshToken>({
-    token: {
-        type: String,
-        required: true,
-        unique: true,
-        index: true
-    },
-    patientUserId: {
-        type: Schema.Types.ObjectId,
-        ref: 'PatientUser',
-        required: true,
-        index: true
-    },
-    expiresAt: {
-        type: Date,
-        required: true
-    },
-    isRevoked: {
-        type: Boolean,
-        default: false,
-        index: true
-    },
-    deviceInfo: {
-        userAgent: String,
-        ipAddress: String,
-        deviceId: String
-    }
-}, {
-    timestamps: true
+export const PatientRefreshToken = createRefreshTokenModel<IPatientRefreshToken>({
+  userField: 'patientUserId',
+  userRef: 'PatientUser',
+  collectionName: 'PatientRefreshToken'
 });
 
-// TTL index for automatic cleanup
-PatientRefreshTokenSchema.index({ expiresAt: 1 }, { expireAfterSeconds: 0 });
-
-// Compound index for active token queries
-PatientRefreshTokenSchema.index({ patientUserId: 1, isRevoked: 1 });
-
-export const PatientRefreshToken = mongoose.model<IPatientRefreshToken>('PatientRefreshToken', PatientRefreshTokenSchema);