<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="203" failures="46" errors="0" time="435.608">
  <testsuite name="ProviderService" errors="0" failures="4" skipped="0" timestamp="2025-09-16T17:07:14" time="131.274" tests="42">
    <testcase classname="ProviderService createProvider should create a new provider successfully" name="ProviderService createProvider should create a new provider successfully" time="4.697">
    </testcase>
    <testcase classname="ProviderService createProvider should create provider with default working hours" name="ProviderService createProvider should create provider with default working hours" time="0.962">
    </testcase>
    <testcase classname="ProviderService createProvider should create provider with custom working hours" name="ProviderService createProvider should create provider with custom working hours" time="0.772">
    </testcase>
    <testcase classname="ProviderService createProvider should create provider linked to user account" name="ProviderService createProvider should create provider linked to user account" time="0.837">
    </testcase>
    <testcase classname="ProviderService createProvider should create provider with appointment types" name="ProviderService createProvider should create provider with appointment types" time="0.705">
    </testcase>
    <testcase classname="ProviderService createProvider should throw error for duplicate email in same clinic" name="ProviderService createProvider should throw error for duplicate email in same clinic" time="0.883">
    </testcase>
    <testcase classname="ProviderService createProvider should throw error for invalid clinic ID" name="ProviderService createProvider should throw error for invalid clinic ID" time="0.602">
    </testcase>
    <testcase classname="ProviderService createProvider should throw error for missing required fields" name="ProviderService createProvider should throw error for missing required fields" time="0.763">
    </testcase>
    <testcase classname="ProviderService createProvider should throw error for user from different clinic" name="ProviderService createProvider should throw error for user from different clinic" time="1.433">
      <failure>MongoServerError: E11000 duplicate key error collection: test.users index: email_1 dup key: { email: &quot;test@example.com&quot; }
    at InsertOneOperation.execute (/home/rebelde/development/topsmile/backend/node_modules/mongoose/node_modules/mongodb/src/operations/insert.ts:88:13)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
    at tryOperation (/home/rebelde/development/topsmile/backend/node_modules/mongoose/node_modules/mongodb/src/operations/execute_operation.ts:283:14)
    at executeOperation (/home/rebelde/development/topsmile/backend/node_modules/mongoose/node_modules/mongodb/src/operations/execute_operation.ts:115:12)
    at Collection.insertOne (/home/rebelde/development/topsmile/backend/node_modules/mongoose/node_modules/mongodb/src/collection.ts:286:12)</failure>
    </testcase>
    <testcase classname="ProviderService createProvider should throw error for user already linked to another provider" name="ProviderService createProvider should throw error for user already linked to another provider" time="0.971">
    </testcase>
    <testcase classname="ProviderService getProviderById should return provider by ID with populated fields" name="ProviderService getProviderById should return provider by ID with populated fields" time="0.811">
    </testcase>
    <testcase classname="ProviderService getProviderById should return null for non-existent provider" name="ProviderService getProviderById should return null for non-existent provider" time="0.893">
    </testcase>
    <testcase classname="ProviderService getProviderById should throw error for invalid provider ID" name="ProviderService getProviderById should throw error for invalid provider ID" time="0.927">
    </testcase>
    <testcase classname="ProviderService updateProvider should update provider successfully" name="ProviderService updateProvider should update provider successfully" time="1.146">
    </testcase>
    <testcase classname="ProviderService updateProvider should update provider with user link" name="ProviderService updateProvider should update provider with user link" time="0.913">
    </testcase>
    <testcase classname="ProviderService updateProvider should update provider with appointment types" name="ProviderService updateProvider should update provider with appointment types" time="0.911">
    </testcase>
    <testcase classname="ProviderService updateProvider should return null for non-existent provider" name="ProviderService updateProvider should return null for non-existent provider" time="0.809">
      <failure>Error: Profissional n√£o encontrado
    at ProviderService.updateProvider (/home/rebelde/development/topsmile/backend/src/services/providerService.ts:190:23)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/unit/services/providerService.test.ts:329:22)</failure>
    </testcase>
    <testcase classname="ProviderService updateProvider should throw error for duplicate email update" name="ProviderService updateProvider should throw error for duplicate email update" time="0.897">
    </testcase>
    <testcase classname="ProviderService deleteProvider should delete provider successfully (soft delete)" name="ProviderService deleteProvider should delete provider successfully (soft delete)" time="0.996">
    </testcase>
    <testcase classname="ProviderService deleteProvider should return false for non-existent provider" name="ProviderService deleteProvider should return false for non-existent provider" time="0.862">
    </testcase>
    <testcase classname="ProviderService deleteProvider should throw error for invalid provider ID" name="ProviderService deleteProvider should throw error for invalid provider ID" time="0.685">
    </testcase>
    <testcase classname="ProviderService searchProviders should search providers by name" name="ProviderService searchProviders should search providers by name" time="1.026">
    </testcase>
    <testcase classname="ProviderService searchProviders should search providers by email" name="ProviderService searchProviders should search providers by email" time="0.899">
    </testcase>
    <testcase classname="ProviderService searchProviders should search providers by specialty" name="ProviderService searchProviders should search providers by specialty" time="0.877">
    </testcase>
    <testcase classname="ProviderService searchProviders should filter by specialties array" name="ProviderService searchProviders should filter by specialties array" time="1.052">
    </testcase>
    <testcase classname="ProviderService searchProviders should return all providers when no search term" name="ProviderService searchProviders should return all providers when no search term" time="1.071">
    </testcase>
    <testcase classname="ProviderService searchProviders should paginate results" name="ProviderService searchProviders should paginate results" time="1.108">
    </testcase>
    <testcase classname="ProviderService searchProviders should sort results" name="ProviderService searchProviders should sort results" time="1.075">
    </testcase>
    <testcase classname="ProviderService getProvidersByClinic should return all active providers for clinic" name="ProviderService getProvidersByClinic should return all active providers for clinic" time="0.917">
    </testcase>
    <testcase classname="ProviderService getProvidersByClinic should return inactive providers when specified" name="ProviderService getProvidersByClinic should return inactive providers when specified" time="1.066">
    </testcase>
    <testcase classname="ProviderService getProvidersByClinic should throw error for invalid clinic ID" name="ProviderService getProvidersByClinic should throw error for invalid clinic ID" time="1">
    </testcase>
    <testcase classname="ProviderService updateWorkingHours should update working hours successfully" name="ProviderService updateWorkingHours should update working hours successfully" time="0.841">
    </testcase>
    <testcase classname="ProviderService updateWorkingHours should return null for non-existent provider" name="ProviderService updateWorkingHours should return null for non-existent provider" time="0.9">
    </testcase>
    <testcase classname="ProviderService updateAppointmentTypes should update appointment types successfully" name="ProviderService updateAppointmentTypes should update appointment types successfully" time="0.658">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

- Expected  - 1
+ Received  + 7

- 68c999bbb38f8cef1fb9cff3
+ {
+   _id: new ObjectId(&apos;68c999bbb38f8cef1fb9cff3&apos;),
+   name: &apos;Consulta Geral&apos;,
+   duration: 60,
+   color: &apos;#3B82F6&apos;,
+   category: &apos;consultation&apos;
+ }
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/unit/services/providerService.test.ts:619:56)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="ProviderService updateAppointmentTypes should throw error for invalid appointment type ID" name="ProviderService updateAppointmentTypes should throw error for invalid appointment type ID" time="0.781">
    </testcase>
    <testcase classname="ProviderService getProviderStats should return correct provider statistics" name="ProviderService getProviderStats should return correct provider statistics" time="1.102">
    </testcase>
    <testcase classname="ProviderService getProviderStats should return specialty breakdown" name="ProviderService getProviderStats should return specialty breakdown" time="1.033">
    </testcase>
    <testcase classname="ProviderService getProviderStats should throw error for invalid clinic ID" name="ProviderService getProviderStats should throw error for invalid clinic ID" time="0.901">
    </testcase>
    <testcase classname="ProviderService reactivateProvider should reactivate inactive provider" name="ProviderService reactivateProvider should reactivate inactive provider" time="0.886">
    </testcase>
    <testcase classname="ProviderService reactivateProvider should throw error for non-existent provider" name="ProviderService reactivateProvider should throw error for non-existent provider" time="0.799">
    </testcase>
    <testcase classname="ProviderService reactivateProvider should throw error for active provider" name="ProviderService reactivateProvider should throw error for active provider" time="0.855">
    </testcase>
    <testcase classname="ProviderService reactivateProvider should throw error for duplicate email when reactivating" name="ProviderService reactivateProvider should throw error for duplicate email when reactivating" time="0.801">
      <failure>Error: J√° existe um profissional ativo com este e-mail nesta cl√≠nica
    at ProviderService.createProvider (/home/rebelde/development/topsmile/backend/src/services/providerService.ts:94:27)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/unit/services/providerService.test.ts:757:30)</failure>
    </testcase>
  </testsuite>
  <testsuite name="ContactService" errors="0" failures="4" skipped="0" timestamp="2025-09-16T17:09:26" time="24.04" tests="38">
    <testcase classname="ContactService createContact should create a new contact successfully" name="ContactService createContact should create a new contact successfully" time="2.695">
    </testcase>
    <testcase classname="ContactService createContact should create contact with default source" name="ContactService createContact should create contact with default source" time="0.382">
    </testcase>
    <testcase classname="ContactService createContact should update existing contact when email already exists" name="ContactService createContact should update existing contact when email already exists" time="0.854">
    </testcase>
    <testcase classname="ContactService createContactSafe should create new contact and return isNew true" name="ContactService createContactSafe should create new contact and return isNew true" time="1.085">
    </testcase>
    <testcase classname="ContactService createContactSafe should update existing contact and return isNew false" name="ContactService createContactSafe should update existing contact and return isNew false" time="0.101">
    </testcase>
    <testcase classname="ContactService createContactSafe should throw error for missing required fields" name="ContactService createContactSafe should throw error for missing required fields" time="0.125">
    </testcase>
    <testcase classname="ContactService createMultipleContacts should create multiple new contacts successfully" name="ContactService createMultipleContacts should create multiple new contacts successfully" time="0.365">
    </testcase>
    <testcase classname="ContactService createMultipleContacts should handle mix of new and existing contacts" name="ContactService createMultipleContacts should handle mix of new and existing contacts" time="0.372">
    </testcase>
    <testcase classname="ContactService createMultipleContacts should handle errors in batch creation" name="ContactService createMultipleContacts should handle errors in batch creation" time="0.495">
    </testcase>
    <testcase classname="ContactService getContactById should return contact by ID" name="ContactService getContactById should return contact by ID" time="0.075">
    </testcase>
    <testcase classname="ContactService getContactById should return null for non-existent contact" name="ContactService getContactById should return null for non-existent contact" time="0.141">
    </testcase>
    <testcase classname="ContactService getContactByEmail should return contact by email" name="ContactService getContactByEmail should return contact by email" time="0.185">
    </testcase>
    <testcase classname="ContactService getContactByEmail should handle email case insensitivity" name="ContactService getContactByEmail should handle email case insensitivity" time="0.553">
    </testcase>
    <testcase classname="ContactService getContactByEmail should throw error for empty email" name="ContactService getContactByEmail should throw error for empty email" time="0.046">
    </testcase>
    <testcase classname="ContactService getContacts should return all contacts with pagination" name="ContactService getContacts should return all contacts with pagination" time="0.369">
    </testcase>
    <testcase classname="ContactService getContacts should filter by status" name="ContactService getContacts should filter by status" time="0.228">
    </testcase>
    <testcase classname="ContactService getContacts should filter by source" name="ContactService getContacts should filter by source" time="0.112">
    </testcase>
    <testcase classname="ContactService getContacts should filter by date range" name="ContactService getContacts should filter by date range" time="0.098">
    </testcase>
    <testcase classname="ContactService getContacts should search by name" name="ContactService getContacts should search by name" time="0.139">
    </testcase>
    <testcase classname="ContactService getContacts should search by email" name="ContactService getContacts should search by email" time="0.12">
    </testcase>
    <testcase classname="ContactService getContacts should paginate results" name="ContactService getContacts should paginate results" time="0.141">
    </testcase>
    <testcase classname="ContactService getContacts should sort results" name="ContactService getContacts should sort results" time="0.126">
    </testcase>
    <testcase classname="ContactService updateContact should update contact successfully" name="ContactService updateContact should update contact successfully" time="0.075">
    </testcase>
    <testcase classname="ContactService updateContact should not update protected fields" name="ContactService updateContact should not update protected fields" time="0.072">
    </testcase>
    <testcase classname="ContactService updateContact should return null for non-existent contact" name="ContactService updateContact should return null for non-existent contact" time="0.075">
    </testcase>
    <testcase classname="ContactService updateContactStatus should update status for multiple contacts" name="ContactService updateContactStatus should update status for multiple contacts" time="0.196">
    </testcase>
    <testcase classname="ContactService updateContactStatus should update status and assign contact" name="ContactService updateContactStatus should update status and assign contact" time="0.07">
    </testcase>
    <testcase classname="ContactService deleteContact should delete contact successfully" name="ContactService deleteContact should delete contact successfully" time="0.072">
    </testcase>
    <testcase classname="ContactService deleteContact should return false for non-existent contact" name="ContactService deleteContact should return false for non-existent contact" time="0.039">
    </testcase>
    <testcase classname="ContactService softDeleteContact should soft delete contact successfully" name="ContactService softDeleteContact should soft delete contact successfully" time="0.284">
      <failure>CastError: Cast to ObjectId failed for value &quot;user123&quot; (type string) at path &quot;deletedBy&quot; because of &quot;BSONError&quot;
    at SchemaObjectId.Object.&lt;anonymous&gt;.SchemaObjectId.cast (/home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/schema/objectId.js:251:11)
    at SchemaObjectId.Object.&lt;anonymous&gt;.SchemaType.applySetters (/home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/schemaType.js:1258:12)
    at SchemaObjectId.Object.&lt;anonymous&gt;.SchemaType.castForQuery (/home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/schemaType.js:1694:17)
    at castUpdateVal (/home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/helpers/query/castUpdate.js:628:19)
    at walkUpdatePath (/home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/helpers/query/castUpdate.js:433:24)
    at castUpdate (/home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/helpers/query/castUpdate.js:144:7)
    at model.Query._castUpdate (/home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/query.js:4874:10)
    at model.Query._findOneAndUpdate (/home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/query.js:3497:23)
    at model.Query.exec (/home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/query.js:4627:80)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
    at ContactService.softDeleteContact (/home/rebelde/development/topsmile/backend/src/services/contactService.ts:332:14)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/unit/services/contactService.test.ts:563:22)</failure>
    </testcase>
    <testcase classname="ContactService softDeleteContact should return null for non-existent contact" name="ContactService softDeleteContact should return null for non-existent contact" time="0.08">
      <failure>ValidationError: Validation failed: status: `deleted` is not a valid enum value for path `status`.
    at _done (/home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/helpers/updateValidators.js:231:19)
    at /home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/helpers/updateValidators.js:207:11
    at schemaPath.doValidate.updateValidator (/home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/helpers/updateValidators.js:165:13)
    at /home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/schemaType.js:1416:9
    at processTicksAndRejections (node:internal/process/task_queues:85:11)</failure>
    </testcase>
    <testcase classname="ContactService getContactStats should return correct contact statistics" name="ContactService getContactStats should return correct contact statistics" time="0.2">
    </testcase>
    <testcase classname="ContactService getContactStats should return status breakdown" name="ContactService getContactStats should return status breakdown" time="0.138">
    </testcase>
    <testcase classname="ContactService getContactStats should return source breakdown" name="ContactService getContactStats should return source breakdown" time="0.204">
    </testcase>
    <testcase classname="ContactService findDuplicateContacts should find duplicate contacts by email" name="ContactService findDuplicateContacts should find duplicate contacts by email" time="0.158">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 1
Received: 0
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/unit/services/contactService.test.ts:674:29)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="ContactService findDuplicateContacts should return empty array when no duplicates" name="ContactService findDuplicateContacts should return empty array when no duplicates" time="0.204">
    </testcase>
    <testcase classname="ContactService mergeDuplicateContacts should merge duplicate contacts successfully" name="ContactService mergeDuplicateContacts should merge duplicate contacts successfully" time="0.12">
      <failure>Error: expect(received).toContain(expected) // indexOf

Expected substring: &quot;website&quot;
Received string:    &quot;referral, referral&quot;
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/unit/services/contactService.test.ts:724:29)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="ContactService mergeDuplicateContacts should throw error for non-existent primary contact" name="ContactService mergeDuplicateContacts should throw error for non-existent primary contact" time="0.055">
    </testcase>
  </testsuite>
  <testsuite name="AppointmentService" errors="0" failures="0" skipped="0" timestamp="2025-09-16T17:09:50" time="41.318" tests="21">
    <testcase classname="AppointmentService createAppointment should create a new appointment successfully" name="AppointmentService createAppointment should create a new appointment successfully" time="6.977">
    </testcase>
    <testcase classname="AppointmentService createAppointment should create appointment with reminders" name="AppointmentService createAppointment should create appointment with reminders" time="3.904">
    </testcase>
    <testcase classname="AppointmentService createAppointment should throw error for overlapping appointments" name="AppointmentService createAppointment should throw error for overlapping appointments" time="3.748">
    </testcase>
    <testcase classname="AppointmentService createAppointment should validate required fields" name="AppointmentService createAppointment should validate required fields" time="2.133">
    </testcase>
    <testcase classname="AppointmentService getAppointmentById should return appointment by ID" name="AppointmentService getAppointmentById should return appointment by ID" time="1.151">
    </testcase>
    <testcase classname="AppointmentService getAppointmentById should return null for non-existent appointment" name="AppointmentService getAppointmentById should return null for non-existent appointment" time="0.798">
    </testcase>
    <testcase classname="AppointmentService getAppointments should return appointments for clinic" name="AppointmentService getAppointments should return appointments for clinic" time="0.816">
    </testcase>
    <testcase classname="AppointmentService getAppointments should filter appointments by status" name="AppointmentService getAppointments should filter appointments by status" time="0.732">
    </testcase>
    <testcase classname="AppointmentService getAppointments should filter appointments by date range" name="AppointmentService getAppointments should filter appointments by date range" time="0.704">
    </testcase>
    <testcase classname="AppointmentService getAppointments should filter appointments by provider" name="AppointmentService getAppointments should filter appointments by provider" time="0.722">
    </testcase>
    <testcase classname="AppointmentService updateAppointment should update appointment successfully" name="AppointmentService updateAppointment should update appointment successfully" time="0.63">
    </testcase>
    <testcase classname="AppointmentService updateAppointment should update appointment time" name="AppointmentService updateAppointment should update appointment time" time="0.633">
    </testcase>
    <testcase classname="AppointmentService updateAppointment should return null for non-existent appointment" name="AppointmentService updateAppointment should return null for non-existent appointment" time="0.614">
    </testcase>
    <testcase classname="AppointmentService cancelAppointment should cancel appointment successfully" name="AppointmentService cancelAppointment should cancel appointment successfully" time="0.625">
    </testcase>
    <testcase classname="AppointmentService cancelAppointment should return null for non-existent appointment" name="AppointmentService cancelAppointment should return null for non-existent appointment" time="0.589">
    </testcase>
    <testcase classname="AppointmentService checkAvailability should return available time slots" name="AppointmentService checkAvailability should return available time slots" time="0.581">
    </testcase>
    <testcase classname="AppointmentService checkAvailability should exclude booked time slots" name="AppointmentService checkAvailability should exclude booked time slots" time="0.699">
    </testcase>
    <testcase classname="AppointmentService getAppointmentStats should return correct appointment statistics" name="AppointmentService getAppointmentStats should return correct appointment statistics" time="0.838">
    </testcase>
    <testcase classname="AppointmentService getAppointmentStats should return statistics for date range" name="AppointmentService getAppointmentStats should return statistics for date range" time="0.769">
    </testcase>
    <testcase classname="AppointmentService rescheduleAppointment should reschedule appointment successfully" name="AppointmentService rescheduleAppointment should reschedule appointment successfully" time="0.669">
    </testcase>
    <testcase classname="AppointmentService rescheduleAppointment should throw error for conflicting time slot" name="AppointmentService rescheduleAppointment should throw error for conflicting time slot" time="0.769">
    </testcase>
  </testsuite>
  <testsuite name="SchedulingService" errors="0" failures="3" skipped="0" timestamp="2025-09-16T17:10:36" time="44.286" tests="16">
    <testcase classname="SchedulingService createAppointment should create appointment successfully" name="SchedulingService createAppointment should create appointment successfully" time="6.035">
    </testcase>
    <testcase classname="SchedulingService createAppointment should return error for invalid appointment type" name="SchedulingService createAppointment should return error for invalid appointment type" time="1.421">
    </testcase>
    <testcase classname="SchedulingService createAppointment should return error for inactive provider" name="SchedulingService createAppointment should return error for inactive provider" time="1.453">
    </testcase>
    <testcase classname="SchedulingService createAppointment should return error for time conflict" name="SchedulingService createAppointment should return error for time conflict" time="1.997">
    </testcase>
    <testcase classname="SchedulingService rescheduleAppointment should reschedule appointment successfully" name="SchedulingService rescheduleAppointment should reschedule appointment successfully" time="1.764">
    </testcase>
    <testcase classname="SchedulingService rescheduleAppointment should return error for non-existent appointment" name="SchedulingService rescheduleAppointment should return error for non-existent appointment" time="1.316">
    </testcase>
    <testcase classname="SchedulingService cancelAppointment should cancel appointment successfully" name="SchedulingService cancelAppointment should cancel appointment successfully" time="1.073">
    </testcase>
    <testcase classname="SchedulingService cancelAppointment should prevent cancelling completed appointment" name="SchedulingService cancelAppointment should prevent cancelling completed appointment" time="0.66">
    </testcase>
    <testcase classname="SchedulingService getAvailableSlots should return available time slots" name="SchedulingService getAvailableSlots should return available time slots" time="0.644">
      <failure>Error: expect(received).toBeGreaterThan(expected)

Expected: &gt; 0
Received:   0
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/unit/services/schedulingService.test.ts:287:29)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="SchedulingService getAvailableSlots should return empty array for non-existent appointment type" name="SchedulingService getAvailableSlots should return empty array for non-existent appointment type" time="0.639">
    </testcase>
    <testcase classname="SchedulingService getAvailableSlots should return empty array when no providers available" name="SchedulingService getAvailableSlots should return empty array when no providers available" time="0.647">
    </testcase>
    <testcase classname="SchedulingService getAppointments should return appointments within date range" name="SchedulingService getAppointments should return appointments within date range" time="0.72">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 2
Received: 1
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/unit/services/schedulingService.test.ts:365:29)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="SchedulingService getAppointments should filter by provider and status" name="SchedulingService getAppointments should filter by provider and status" time="0.728">
    </testcase>
    <testcase classname="SchedulingService getAppointmentConflicts should return no conflicts when slot is available" name="SchedulingService getAppointmentConflicts should return no conflicts when slot is available" time="0.588">
    </testcase>
    <testcase classname="SchedulingService getAppointmentConflicts should return conflicts when appointments overlap" name="SchedulingService getAppointmentConflicts should return conflicts when appointments overlap" time="0.844">
    </testcase>
    <testcase classname="SchedulingService getProviderUtilization should calculate provider utilization correctly" name="SchedulingService getProviderUtilization should calculate provider utilization correctly" time="0.775">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;_id&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/unit/services/schedulingService.test.ts:456:62)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
  </testsuite>
  <testsuite name="PatientService" errors="0" failures="10" skipped="0" timestamp="2025-09-16T17:11:20" time="33.44" tests="22">
    <testcase classname="PatientService createPatient should create a new patient successfully" name="PatientService createPatient should create a new patient successfully" time="4.302">
      <failure>ValidationError: Patient validation failed: cpf: CPF inv√°lido
    at model.Object.&lt;anonymous&gt;.Document.invalidate (/home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/document.js:3358:32)
    at /home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/document.js:3119:17
    at /home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/schemaType.js:1416:9
    at processTicksAndRejections (node:internal/process/task_queues:85:11)</failure>
    </testcase>
    <testcase classname="PatientService createPatient should create patient without optional fields" name="PatientService createPatient should create patient without optional fields" time="1.784">
      <failure>ValidationError: Patient validation failed: phone: Telefone deve estar em formato brasileiro v√°lido
    at model.Object.&lt;anonymous&gt;.Document.invalidate (/home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/document.js:3358:32)
    at /home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/document.js:3119:17
    at /home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/schemaType.js:1416:9
    at processTicksAndRejections (node:internal/process/task_queues:85:11)</failure>
    </testcase>
    <testcase classname="PatientService createPatient should throw error for duplicate phone" name="PatientService createPatient should throw error for duplicate phone" time="2.111">
    </testcase>
    <testcase classname="PatientService createPatient should validate required fields" name="PatientService createPatient should validate required fields" time="2.175">
    </testcase>
    <testcase classname="PatientService getPatientById should return patient by ID" name="PatientService getPatientById should return patient by ID" time="0.626">
    </testcase>
    <testcase classname="PatientService getPatientById should return null for non-existent patient" name="PatientService getPatientById should return null for non-existent patient" time="0.62">
    </testcase>
    <testcase classname="PatientService getPatientsByClinic should return all active patients for clinic" name="PatientService getPatientsByClinic should return all active patients for clinic" time="0.621">
      <failure>ValidationError: Patient validation failed: phone: Telefone deve estar em formato brasileiro v√°lido
    at model.Object.&lt;anonymous&gt;.Document.invalidate (/home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/document.js:3358:32)
    at /home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/document.js:3119:17
    at /home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/schemaType.js:1416:9
    at processTicksAndRejections (node:internal/process/task_queues:85:11)</failure>
    </testcase>
    <testcase classname="PatientService getPatientsByClinic should return inactive patients when specified" name="PatientService getPatientsByClinic should return inactive patients when specified" time="0.932">
      <failure>ValidationError: Patient validation failed: phone: Telefone deve estar em formato brasileiro v√°lido
    at model.Object.&lt;anonymous&gt;.Document.invalidate (/home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/document.js:3358:32)
    at /home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/document.js:3119:17
    at /home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/schemaType.js:1416:9
    at processTicksAndRejections (node:internal/process/task_queues:85:11)</failure>
    </testcase>
    <testcase classname="PatientService updatePatient should update patient successfully" name="PatientService updatePatient should update patient successfully" time="1.035">
    </testcase>
    <testcase classname="PatientService updatePatient should return null for non-existent patient" name="PatientService updatePatient should return null for non-existent patient" time="1.231">
    </testcase>
    <testcase classname="PatientService updatePatient should update medical history" name="PatientService updatePatient should update medical history" time="1.221">
    </testcase>
    <testcase classname="PatientService deletePatient should delete patient successfully" name="PatientService deletePatient should delete patient successfully" time="1.341">
    </testcase>
    <testcase classname="PatientService deletePatient should return false for non-existent patient" name="PatientService deletePatient should return false for non-existent patient" time="0.854">
    </testcase>
    <testcase classname="PatientService searchPatients should search patients by name" name="PatientService searchPatients should search patients by name" time="1.107">
      <failure>ValidationError: Patient validation failed: cpf: CPF inv√°lido
    at model.Object.&lt;anonymous&gt;.Document.invalidate (/home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/document.js:3358:32)
    at /home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/document.js:3119:17
    at /home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/schemaType.js:1416:9
    at processTicksAndRejections (node:internal/process/task_queues:85:11)</failure>
    </testcase>
    <testcase classname="PatientService searchPatients should search patients by phone" name="PatientService searchPatients should search patients by phone" time="0.946">
      <failure>ValidationError: Patient validation failed: cpf: CPF inv√°lido
    at model.Object.&lt;anonymous&gt;.Document.invalidate (/home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/document.js:3358:32)
    at /home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/document.js:3119:17
    at /home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/schemaType.js:1416:9
    at processTicksAndRejections (node:internal/process/task_queues:85:11)</failure>
    </testcase>
    <testcase classname="PatientService searchPatients should search patients by email" name="PatientService searchPatients should search patients by email" time="0.69">
      <failure>ValidationError: Patient validation failed: cpf: CPF inv√°lido
    at model.Object.&lt;anonymous&gt;.Document.invalidate (/home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/document.js:3358:32)
    at /home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/document.js:3119:17
    at /home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/schemaType.js:1416:9
    at processTicksAndRejections (node:internal/process/task_queues:85:11)</failure>
    </testcase>
    <testcase classname="PatientService searchPatients should return empty array for no matches" name="PatientService searchPatients should return empty array for no matches" time="0.581">
      <failure>ValidationError: Patient validation failed: cpf: CPF inv√°lido
    at model.Object.&lt;anonymous&gt;.Document.invalidate (/home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/document.js:3358:32)
    at /home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/document.js:3119:17
    at /home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/schemaType.js:1416:9
    at processTicksAndRejections (node:internal/process/task_queues:85:11)</failure>
    </testcase>
    <testcase classname="PatientService searchPatients should paginate results" name="PatientService searchPatients should paginate results" time="0.683">
      <failure>ValidationError: Patient validation failed: cpf: CPF inv√°lido
    at model.Object.&lt;anonymous&gt;.Document.invalidate (/home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/document.js:3358:32)
    at /home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/document.js:3119:17
    at /home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/schemaType.js:1416:9
    at processTicksAndRejections (node:internal/process/task_queues:85:11)</failure>
    </testcase>
    <testcase classname="PatientService getPatientStats should return correct patient statistics" name="PatientService getPatientStats should return correct patient statistics" time="0.519">
      <failure>ValidationError: Patient validation failed: name: Nome deve conter apenas letras, espa√ßos, h√≠fens, apostrofes e acentos
    at model.Object.&lt;anonymous&gt;.Document.invalidate (/home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/document.js:3358:32)
    at /home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/document.js:3119:17
    at /home/rebelde/development/topsmile/backend/node_modules/mongoose/lib/schemaType.js:1416:9
    at processTicksAndRejections (node:internal/process/task_queues:85:11)</failure>
    </testcase>
    <testcase classname="PatientService updateMedicalHistory should update medical history successfully" name="PatientService updateMedicalHistory should update medical history successfully" time="0.55">
    </testcase>
    <testcase classname="PatientService reactivatePatient should reactivate inactive patient" name="PatientService reactivatePatient should reactivate inactive patient" time="0.551">
    </testcase>
    <testcase classname="PatientService reactivatePatient should throw error for non-existent patient" name="PatientService reactivatePatient should throw error for non-existent patient" time="0.521">
    </testcase>
  </testsuite>
  <testsuite name="Patient Portal Integration Tests" errors="0" failures="21" skipped="0" timestamp="2025-09-16T17:11:54" time="47.571" tests="21">
    <testcase classname="Patient Portal Integration Tests should login patient user and return access token" name="Patient Portal Integration Tests should login patient user and return access token" time="3.938">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:62:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should get patient user info with valid token" name="Patient Portal Integration Tests should get patient user info with valid token" time="5.167">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:62:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should get upcoming appointments for patient" name="Patient Portal Integration Tests should get upcoming appointments for patient" time="0.696">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:62:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle invalid login credentials" name="Patient Portal Integration Tests should handle invalid login credentials" time="0.98">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:62:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should logout patient user successfully" name="Patient Portal Integration Tests should logout patient user successfully" time="1.444">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:62:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should reject requests with invalid token" name="Patient Portal Integration Tests should reject requests with invalid token" time="0.692">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:62:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should reject requests without token" name="Patient Portal Integration Tests should reject requests without token" time="1.022">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:62:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle appointment booking with valid data" name="Patient Portal Integration Tests should handle appointment booking with valid data" time="0.632">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:62:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle appointment cancellation" name="Patient Portal Integration Tests should handle appointment cancellation" time="0.865">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:62:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle patient profile updates" name="Patient Portal Integration Tests should handle patient profile updates" time="1.343">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:62:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle password reset request" name="Patient Portal Integration Tests should handle password reset request" time="0.418">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:62:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle rate limiting on auth endpoints" name="Patient Portal Integration Tests should handle rate limiting on auth endpoints" time="0.544">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:62:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle concurrent session management" name="Patient Portal Integration Tests should handle concurrent session management" time="0.43">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:62:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle appointment rescheduling" name="Patient Portal Integration Tests should handle appointment rescheduling" time="0.346">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:62:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle patient medical history retrieval" name="Patient Portal Integration Tests should handle patient medical history retrieval" time="0.362">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:62:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle appointment type listing" name="Patient Portal Integration Tests should handle appointment type listing" time="0.358">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:62:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle provider availability checking" name="Patient Portal Integration Tests should handle provider availability checking" time="0.387">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:62:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle error responses gracefully" name="Patient Portal Integration Tests should handle error responses gracefully" time="0.441">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:62:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle CORS headers properly" name="Patient Portal Integration Tests should handle CORS headers properly" time="0.376">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:62:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle large request payloads" name="Patient Portal Integration Tests should handle large request payloads" time="0.358">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:62:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle database connection errors gracefully" name="Patient Portal Integration Tests should handle database connection errors gracefully" time="0.308">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:62:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
  </testsuite>
  <testsuite name="Auth Routes Integration" errors="0" failures="4" skipped="0" timestamp="2025-09-16T17:12:41" time="21.887" tests="13">
    <testcase classname="Auth Routes Integration POST /api/auth/register should register a new user successfully" name="Auth Routes Integration POST /api/auth/register should register a new user successfully" time="3.161">
      <failure>Error: expect(received).toBeDefined()

Received: undefined
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/authRoutes.test.ts:49:46)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Auth Routes Integration POST /api/auth/register should return 400 for invalid data" name="Auth Routes Integration POST /api/auth/register should return 400 for invalid data" time="0.893">
    </testcase>
    <testcase classname="Auth Routes Integration POST /api/auth/register should return 400 for duplicate email" name="Auth Routes Integration POST /api/auth/register should return 400 for duplicate email" time="0.793">
    </testcase>
    <testcase classname="Auth Routes Integration POST /api/auth/login should login user successfully" name="Auth Routes Integration POST /api/auth/login should login user successfully" time="1.109">
      <failure>Error: expect(received).toBeDefined()

Received: undefined
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/authRoutes.test.ts:100:46)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Auth Routes Integration POST /api/auth/login should return 400 for missing credentials" name="Auth Routes Integration POST /api/auth/login should return 400 for missing credentials" time="0.526">
    </testcase>
    <testcase classname="Auth Routes Integration POST /api/auth/login should return 401 for invalid credentials" name="Auth Routes Integration POST /api/auth/login should return 401 for invalid credentials" time="0.531">
    </testcase>
    <testcase classname="Auth Routes Integration GET /api/auth/me should return current user profile" name="Auth Routes Integration GET /api/auth/me should return current user profile" time="0.566">
    </testcase>
    <testcase classname="Auth Routes Integration GET /api/auth/me should return 401 for invalid token" name="Auth Routes Integration GET /api/auth/me should return 401 for invalid token" time="1.222">
    </testcase>
    <testcase classname="Auth Routes Integration PATCH /api/auth/change-password should change password successfully" name="Auth Routes Integration PATCH /api/auth/change-password should change password successfully" time="1.987">
    </testcase>
    <testcase classname="Auth Routes Integration PATCH /api/auth/change-password should return 400 for invalid new password" name="Auth Routes Integration PATCH /api/auth/change-password should return 400 for invalid new password" time="0.651">
    </testcase>
    <testcase classname="Auth Routes Integration POST /api/auth/logout should logout user successfully" name="Auth Routes Integration POST /api/auth/logout should logout user successfully" time="0.675">
      <failure>Error: expected 200 &quot;OK&quot;, got 500 &quot;Internal Server Error&quot;
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/authRoutes.test.ts:194:10)
    at Promise.then.completed (/home/rebelde/development/topsmile/backend/node_modules/jest-circus/build/utils.js:298:28)
    at new Promise (&lt;anonymous&gt;)
    at callAsyncCircusFn (/home/rebelde/development/topsmile/backend/node_modules/jest-circus/build/utils.js:231:10)
    at _callCircusTest (/home/rebelde/development/topsmile/backend/node_modules/jest-circus/build/run.js:316:40)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
    at _runTest (/home/rebelde/development/topsmile/backend/node_modules/jest-circus/build/run.js:252:3)
    at _runTestsForDescribeBlock (/home/rebelde/development/topsmile/backend/node_modules/jest-circus/build/run.js:126:9)
    at _runTestsForDescribeBlock (/home/rebelde/development/topsmile/backend/node_modules/jest-circus/build/run.js:121:9)
    at _runTestsForDescribeBlock (/home/rebelde/development/topsmile/backend/node_modules/jest-circus/build/run.js:121:9)
    at run (/home/rebelde/development/topsmile/backend/node_modules/jest-circus/build/run.js:71:3)
    at runAndTransformResultsToJestFormat (/home/rebelde/development/topsmile/backend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
    at jestAdapter (/home/rebelde/development/topsmile/backend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
    at runTestInternal (/home/rebelde/development/topsmile/backend/node_modules/jest-runner/build/runTest.js:367:16)
    at runTest (/home/rebelde/development/topsmile/backend/node_modules/jest-runner/build/runTest.js:444:34)
----
    at Test._assertStatus (/home/rebelde/development/topsmile/backend/node_modules/supertest/lib/test.js:309:14)
    at /home/rebelde/development/topsmile/backend/node_modules/supertest/lib/test.js:365:13
    at Test._assertFunction (/home/rebelde/development/topsmile/backend/node_modules/supertest/lib/test.js:342:13)
    at Test.assert (/home/rebelde/development/topsmile/backend/node_modules/supertest/lib/test.js:195:23)
    at localAssert (/home/rebelde/development/topsmile/backend/node_modules/supertest/lib/test.js:138:14)
    at Server.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/node_modules/supertest/lib/test.js:152:11)
    at Object.onceWrapper (node:events:633:28)
    at Server.emit (node:events:519:28)
    at emitCloseNT (node:net:2419:8)
    at processTicksAndRejections (node:internal/process/task_queues:89:21)</failure>
    </testcase>
    <testcase classname="Auth Routes Integration POST /api/auth/refresh should refresh access token successfully" name="Auth Routes Integration POST /api/auth/refresh should refresh access token successfully" time="1.073">
      <failure>Error: expected 200 &quot;OK&quot;, got 401 &quot;Unauthorized&quot;
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/authRoutes.test.ts:216:10)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
----
    at Test._assertStatus (/home/rebelde/development/topsmile/backend/node_modules/supertest/lib/test.js:309:14)
    at /home/rebelde/development/topsmile/backend/node_modules/supertest/lib/test.js:365:13
    at Test._assertFunction (/home/rebelde/development/topsmile/backend/node_modules/supertest/lib/test.js:342:13)
    at Test.assert (/home/rebelde/development/topsmile/backend/node_modules/supertest/lib/test.js:195:23)
    at localAssert (/home/rebelde/development/topsmile/backend/node_modules/supertest/lib/test.js:138:14)
    at Server.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/node_modules/supertest/lib/test.js:152:11)
    at Object.onceWrapper (node:events:633:28)
    at Server.emit (node:events:519:28)
    at emitCloseNT (node:net:2419:8)
    at processTicksAndRejections (node:internal/process/task_queues:89:21)</failure>
    </testcase>
    <testcase classname="Auth Routes Integration POST /api/auth/refresh should return 401 for invalid refresh token" name="Auth Routes Integration POST /api/auth/refresh should return 401 for invalid refresh token" time="0.53">
    </testcase>
  </testsuite>
  <testsuite name="AuthService" errors="0" failures="0" skipped="0" timestamp="2025-09-16T17:13:03" time="19.017" tests="11">
    <testcase classname="AuthService register should register a new user successfully" name="AuthService register should register a new user successfully" time="3.511">
    </testcase>
    <testcase classname="AuthService register should hash the password" name="AuthService register should hash the password" time="0.552">
    </testcase>
    <testcase classname="AuthService register should throw error for duplicate email" name="AuthService register should throw error for duplicate email" time="0.575">
    </testcase>
    <testcase classname="AuthService register should create clinic when clinic data is provided" name="AuthService register should create clinic when clinic data is provided" time="0.556">
    </testcase>
    <testcase classname="AuthService login should login user with correct credentials" name="AuthService login should login user with correct credentials" time="1.039">
    </testcase>
    <testcase classname="AuthService login should throw error for invalid email" name="AuthService login should throw error for invalid email" time="0.022">
    </testcase>
    <testcase classname="AuthService login should throw error for invalid password" name="AuthService login should throw error for invalid password" time="1.046">
    </testcase>
    <testcase classname="AuthService getUserById should return user by ID" name="AuthService getUserById should return user by ID" time="1.011">
    </testcase>
    <testcase classname="AuthService getUserById should throw error for non-existent user" name="AuthService getUserById should throw error for non-existent user" time="0.049">
    </testcase>
    <testcase classname="AuthService changePassword should change password successfully" name="AuthService changePassword should change password successfully" time="2.15">
    </testcase>
    <testcase classname="AuthService changePassword should throw error for incorrect current password" name="AuthService changePassword should throw error for incorrect current password" time="1.015">
    </testcase>
  </testsuite>
  <testsuite name="Performance Tests" errors="0" failures="0" skipped="0" timestamp="2025-09-16T17:13:22" time="20.737" tests="5">
    <testcase classname="Performance Tests Load Testing should handle multiple concurrent login requests" name="Performance Tests Load Testing should handle multiple concurrent login requests" time="6.185">
    </testcase>
    <testcase classname="Performance Tests Load Testing should handle rapid successive auth requests" name="Performance Tests Load Testing should handle rapid successive auth requests" time="1.153">
    </testcase>
    <testcase classname="Performance Tests Memory Usage should not have memory leaks with repeated requests" name="Performance Tests Memory Usage should not have memory leaks with repeated requests" time="1.741">
    </testcase>
    <testcase classname="Performance Tests Database Query Performance should handle database load efficiently" name="Performance Tests Database Query Performance should handle database load efficiently" time="5.457">
    </testcase>
    <testcase classname="Performance Tests Response Time Benchmarks should respond quickly to auth endpoints" name="Performance Tests Response Time Benchmarks should respond quickly to auth endpoints" time="0.565">
    </testcase>
  </testsuite>
  <testsuite name="Error Boundary Tests" errors="0" failures="0" skipped="0" timestamp="2025-09-16T17:13:43" time="24.853" tests="6">
    <testcase classname="Error Boundary Tests Database Connection Failures should handle database disconnection gracefully" name="Error Boundary Tests Database Connection Failures should handle database disconnection gracefully" time="6.638">
    </testcase>
    <testcase classname="Error Boundary Tests Database Connection Failures should handle database connection timeout" name="Error Boundary Tests Database Connection Failures should handle database connection timeout" time="3.258">
    </testcase>
    <testcase classname="Error Boundary Tests External Service Failures should handle external API failures" name="Error Boundary Tests External Service Failures should handle external API failures" time="1.57">
    </testcase>
    <testcase classname="Error Boundary Tests Malformed Requests should handle malformed JSON" name="Error Boundary Tests Malformed Requests should handle malformed JSON" time="0.961">
    </testcase>
    <testcase classname="Error Boundary Tests Malformed Requests should handle oversized payloads" name="Error Boundary Tests Malformed Requests should handle oversized payloads" time="0.883">
    </testcase>
    <testcase classname="Error Boundary Tests Concurrent Request Handling should handle multiple concurrent requests" name="Error Boundary Tests Concurrent Request Handling should handle multiple concurrent requests" time="2.475">
    </testcase>
  </testsuite>
  <testsuite name="Security Tests" errors="0" failures="0" skipped="0" timestamp="2025-09-16T17:14:08" time="14.005" tests="7">
    <testcase classname="Security Tests Token Expiration should handle expired tokens" name="Security Tests Token Expiration should handle expired tokens" time="3.39">
    </testcase>
    <testcase classname="Security Tests Token Expiration should handle malformed tokens" name="Security Tests Token Expiration should handle malformed tokens" time="1.099">
    </testcase>
    <testcase classname="Security Tests Token Expiration should handle missing tokens" name="Security Tests Token Expiration should handle missing tokens" time="1.016">
    </testcase>
    <testcase classname="Security Tests Input Validation &amp; Sanitization should handle extremely long input strings" name="Security Tests Input Validation &amp; Sanitization should handle extremely long input strings" time="1.232">
    </testcase>
    <testcase classname="Security Tests Input Validation &amp; Sanitization should handle SQL injection attempts" name="Security Tests Input Validation &amp; Sanitization should handle SQL injection attempts" time="0.675">
    </testcase>
    <testcase classname="Security Tests Input Validation &amp; Sanitization should handle XSS attempts" name="Security Tests Input Validation &amp; Sanitization should handle XSS attempts" time="0.618">
    </testcase>
    <testcase classname="Security Tests Rate Limiting should handle rapid successive requests" name="Security Tests Rate Limiting should handle rapid successive requests" time="0.855">
    </testcase>
  </testsuite>
  <testsuite name="Database Setup Test" errors="0" failures="0" skipped="0" timestamp="2025-09-16T17:14:22" time="4.403" tests="1">
    <testcase classname="Database Setup Test should connect to database" name="Database Setup Test should connect to database" time="0.004">
    </testcase>
  </testsuite>
</testsuites>