<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="226" failures="25" errors="0" time="281.49">
  <testsuite name="Patient Portal Integration Tests" errors="0" failures="21" skipped="0" timestamp="2025-09-18T18:06:03" time="36.911" tests="21">
    <testcase classname="Patient Portal Integration Tests should login patient user and return access token" name="Patient Portal Integration Tests should login patient user and return access token" time="3.836">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:63:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should get patient user info with valid token" name="Patient Portal Integration Tests should get patient user info with valid token" time="2.485">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:63:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should get upcoming appointments for patient" name="Patient Portal Integration Tests should get upcoming appointments for patient" time="2.808">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:63:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle invalid login credentials" name="Patient Portal Integration Tests should handle invalid login credentials" time="1.588">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:63:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should logout patient user successfully" name="Patient Portal Integration Tests should logout patient user successfully" time="1.076">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:63:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should reject requests with invalid token" name="Patient Portal Integration Tests should reject requests with invalid token" time="0.665">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:63:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should reject requests without token" name="Patient Portal Integration Tests should reject requests without token" time="0.62">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:63:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle appointment booking with valid data" name="Patient Portal Integration Tests should handle appointment booking with valid data" time="0.652">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:63:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle appointment cancellation" name="Patient Portal Integration Tests should handle appointment cancellation" time="0.624">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:63:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle patient profile updates" name="Patient Portal Integration Tests should handle patient profile updates" time="0.612">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:63:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle password reset request" name="Patient Portal Integration Tests should handle password reset request" time="0.709">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:63:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle rate limiting on auth endpoints" name="Patient Portal Integration Tests should handle rate limiting on auth endpoints" time="0.7">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:63:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle concurrent session management" name="Patient Portal Integration Tests should handle concurrent session management" time="0.596">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:63:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle appointment rescheduling" name="Patient Portal Integration Tests should handle appointment rescheduling" time="1.107">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:63:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle patient medical history retrieval" name="Patient Portal Integration Tests should handle patient medical history retrieval" time="0.844">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:63:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle appointment type listing" name="Patient Portal Integration Tests should handle appointment type listing" time="0.699">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:63:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle provider availability checking" name="Patient Portal Integration Tests should handle provider availability checking" time="0.705">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:63:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle error responses gracefully" name="Patient Portal Integration Tests should handle error responses gracefully" time="0.697">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:63:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle CORS headers properly" name="Patient Portal Integration Tests should handle CORS headers properly" time="0.595">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:63:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle large request payloads" name="Patient Portal Integration Tests should handle large request payloads" time="0.383">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:63:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle database connection errors gracefully" name="Patient Portal Integration Tests should handle database connection errors gracefully" time="0.339">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;accessToken&apos;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:63:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
  </testsuite>
  <testsuite name="Patient Routes Integration Tests" errors="0" failures="2" skipped="0" timestamp="2025-09-18T18:06:40" time="22.737" tests="23">
    <testcase classname="Patient Routes Integration Tests POST /api/patients should create a patient successfully" name="Patient Routes Integration Tests POST /api/patients should create a patient successfully" time="4.087">
    </testcase>
    <testcase classname="Patient Routes Integration Tests POST /api/patients should return 400 for invalid data" name="Patient Routes Integration Tests POST /api/patients should return 400 for invalid data" time="1.401">
    </testcase>
    <testcase classname="Patient Routes Integration Tests POST /api/patients should return 400 for duplicate phone in same clinic" name="Patient Routes Integration Tests POST /api/patients should return 400 for duplicate phone in same clinic" time="0.649">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 400
Received: 201
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientRoutes.test.ts:197:31)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Routes Integration Tests POST /api/patients should create patient with minimal required data" name="Patient Routes Integration Tests POST /api/patients should create patient with minimal required data" time="0.525">
    </testcase>
    <testcase classname="Patient Routes Integration Tests GET /api/patients should return paginated list of patients" name="Patient Routes Integration Tests GET /api/patients should return paginated list of patients" time="0.588">
    </testcase>
    <testcase classname="Patient Routes Integration Tests GET /api/patients should search patients by name" name="Patient Routes Integration Tests GET /api/patients should search patients by name" time="0.576">
    </testcase>
    <testcase classname="Patient Routes Integration Tests GET /api/patients should search patients by phone" name="Patient Routes Integration Tests GET /api/patients should search patients by phone" time="0.576">
      <failure>Error: expect(received).toHaveLength(expected)

Expected length: 1
Received length: 0
Received array:  []
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientRoutes.test.ts:285:43)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Routes Integration Tests GET /api/patients should search patients by email" name="Patient Routes Integration Tests GET /api/patients should search patients by email" time="0.636">
    </testcase>
    <testcase classname="Patient Routes Integration Tests GET /api/patients should filter by status" name="Patient Routes Integration Tests GET /api/patients should filter by status" time="0.566">
    </testcase>
    <testcase classname="Patient Routes Integration Tests GET /api/patients should paginate results" name="Patient Routes Integration Tests GET /api/patients should paginate results" time="0.584">
    </testcase>
    <testcase classname="Patient Routes Integration Tests GET /api/patients should sort results" name="Patient Routes Integration Tests GET /api/patients should sort results" time="0.672">
    </testcase>
    <testcase classname="Patient Routes Integration Tests GET /api/patients/stats should return patient statistics" name="Patient Routes Integration Tests GET /api/patients/stats should return patient statistics" time="0.633">
    </testcase>
    <testcase classname="Patient Routes Integration Tests GET /api/patients/:id should return patient by ID" name="Patient Routes Integration Tests GET /api/patients/:id should return patient by ID" time="0.536">
    </testcase>
    <testcase classname="Patient Routes Integration Tests GET /api/patients/:id should return 404 for non-existent patient" name="Patient Routes Integration Tests GET /api/patients/:id should return 404 for non-existent patient" time="0.516">
    </testcase>
    <testcase classname="Patient Routes Integration Tests PATCH /api/patients/:id should update patient successfully" name="Patient Routes Integration Tests PATCH /api/patients/:id should update patient successfully" time="0.543">
    </testcase>
    <testcase classname="Patient Routes Integration Tests PATCH /api/patients/:id should return 404 for non-existent patient" name="Patient Routes Integration Tests PATCH /api/patients/:id should return 404 for non-existent patient" time="0.539">
    </testcase>
    <testcase classname="Patient Routes Integration Tests PATCH /api/patients/:id should return 400 for invalid data" name="Patient Routes Integration Tests PATCH /api/patients/:id should return 400 for invalid data" time="0.662">
    </testcase>
    <testcase classname="Patient Routes Integration Tests PATCH /api/patients/:id/medical-history should update medical history successfully" name="Patient Routes Integration Tests PATCH /api/patients/:id/medical-history should update medical history successfully" time="0.631">
    </testcase>
    <testcase classname="Patient Routes Integration Tests PATCH /api/patients/:id/medical-history should update partial medical history" name="Patient Routes Integration Tests PATCH /api/patients/:id/medical-history should update partial medical history" time="0.583">
    </testcase>
    <testcase classname="Patient Routes Integration Tests PATCH /api/patients/:id/reactivate should reactivate patient successfully" name="Patient Routes Integration Tests PATCH /api/patients/:id/reactivate should reactivate patient successfully" time="0.554">
    </testcase>
    <testcase classname="Patient Routes Integration Tests PATCH /api/patients/:id/reactivate should return 404 for active patient" name="Patient Routes Integration Tests PATCH /api/patients/:id/reactivate should return 404 for active patient" time="0.537">
    </testcase>
    <testcase classname="Patient Routes Integration Tests DELETE /api/patients/:id should delete patient successfully" name="Patient Routes Integration Tests DELETE /api/patients/:id should delete patient successfully" time="0.527">
    </testcase>
    <testcase classname="Patient Routes Integration Tests DELETE /api/patients/:id should return 404 for non-existent patient" name="Patient Routes Integration Tests DELETE /api/patients/:id should return 404 for non-existent patient" time="0.513">
    </testcase>
  </testsuite>
  <testsuite name="Auth Routes Integration" errors="0" failures="2" skipped="0" timestamp="2025-09-18T18:07:02" time="17.843" tests="13">
    <testcase classname="Auth Routes Integration POST /api/auth/register should register a new user successfully" name="Auth Routes Integration POST /api/auth/register should register a new user successfully" time="3.968">
    </testcase>
    <testcase classname="Auth Routes Integration POST /api/auth/register should return 400 for invalid data" name="Auth Routes Integration POST /api/auth/register should return 400 for invalid data" time="1.212">
    </testcase>
    <testcase classname="Auth Routes Integration POST /api/auth/register should return 400 for duplicate email" name="Auth Routes Integration POST /api/auth/register should return 400 for duplicate email" time="0.561">
    </testcase>
    <testcase classname="Auth Routes Integration POST /api/auth/login should login user successfully" name="Auth Routes Integration POST /api/auth/login should login user successfully" time="1.042">
    </testcase>
    <testcase classname="Auth Routes Integration POST /api/auth/login should return 400 for missing credentials" name="Auth Routes Integration POST /api/auth/login should return 400 for missing credentials" time="0.502">
    </testcase>
    <testcase classname="Auth Routes Integration POST /api/auth/login should return 401 for invalid credentials" name="Auth Routes Integration POST /api/auth/login should return 401 for invalid credentials" time="0.597">
    </testcase>
    <testcase classname="Auth Routes Integration GET /api/auth/me should return current user profile" name="Auth Routes Integration GET /api/auth/me should return current user profile" time="0.615">
    </testcase>
    <testcase classname="Auth Routes Integration GET /api/auth/me should return 401 for invalid token" name="Auth Routes Integration GET /api/auth/me should return 401 for invalid token" time="0.583">
    </testcase>
    <testcase classname="Auth Routes Integration PATCH /api/auth/change-password should change password successfully" name="Auth Routes Integration PATCH /api/auth/change-password should change password successfully" time="1.439">
    </testcase>
    <testcase classname="Auth Routes Integration PATCH /api/auth/change-password should return 400 for invalid new password" name="Auth Routes Integration PATCH /api/auth/change-password should return 400 for invalid new password" time="0.548">
    </testcase>
    <testcase classname="Auth Routes Integration POST /api/auth/logout should logout user successfully" name="Auth Routes Integration POST /api/auth/logout should logout user successfully" time="0.531">
      <failure>Error: expected 200 &quot;OK&quot;, got 500 &quot;Internal Server Error&quot;
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/authRoutes.test.ts:194:10)
    at Promise.then.completed (/home/rebelde/development/topsmile/backend/node_modules/jest-circus/build/utils.js:298:28)
    at new Promise (&lt;anonymous&gt;)
    at callAsyncCircusFn (/home/rebelde/development/topsmile/backend/node_modules/jest-circus/build/utils.js:231:10)
    at _callCircusTest (/home/rebelde/development/topsmile/backend/node_modules/jest-circus/build/run.js:316:40)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
    at _runTest (/home/rebelde/development/topsmile/backend/node_modules/jest-circus/build/run.js:252:3)
    at _runTestsForDescribeBlock (/home/rebelde/development/topsmile/backend/node_modules/jest-circus/build/run.js:126:9)
    at _runTestsForDescribeBlock (/home/rebelde/development/topsmile/backend/node_modules/jest-circus/build/run.js:121:9)
    at _runTestsForDescribeBlock (/home/rebelde/development/topsmile/backend/node_modules/jest-circus/build/run.js:121:9)
    at run (/home/rebelde/development/topsmile/backend/node_modules/jest-circus/build/run.js:71:3)
    at runAndTransformResultsToJestFormat (/home/rebelde/development/topsmile/backend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
    at jestAdapter (/home/rebelde/development/topsmile/backend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
    at runTestInternal (/home/rebelde/development/topsmile/backend/node_modules/jest-runner/build/runTest.js:367:16)
    at runTest (/home/rebelde/development/topsmile/backend/node_modules/jest-runner/build/runTest.js:444:34)
----
    at Test._assertStatus (/home/rebelde/development/topsmile/backend/node_modules/supertest/lib/test.js:309:14)
    at /home/rebelde/development/topsmile/backend/node_modules/supertest/lib/test.js:365:13
    at Test._assertFunction (/home/rebelde/development/topsmile/backend/node_modules/supertest/lib/test.js:342:13)
    at Test.assert (/home/rebelde/development/topsmile/backend/node_modules/supertest/lib/test.js:195:23)
    at localAssert (/home/rebelde/development/topsmile/backend/node_modules/supertest/lib/test.js:138:14)
    at Server.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/node_modules/supertest/lib/test.js:152:11)
    at Object.onceWrapper (node:events:633:28)
    at Server.emit (node:events:519:28)
    at emitCloseNT (node:net:2419:8)
    at processTicksAndRejections (node:internal/process/task_queues:89:21)</failure>
    </testcase>
    <testcase classname="Auth Routes Integration POST /api/auth/refresh should refresh access token successfully" name="Auth Routes Integration POST /api/auth/refresh should refresh access token successfully" time="0.969">
      <failure>Error: expected 200 &quot;OK&quot;, got 401 &quot;Unauthorized&quot;
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/authRoutes.test.ts:216:10)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
----
    at Test._assertStatus (/home/rebelde/development/topsmile/backend/node_modules/supertest/lib/test.js:309:14)
    at /home/rebelde/development/topsmile/backend/node_modules/supertest/lib/test.js:365:13
    at Test._assertFunction (/home/rebelde/development/topsmile/backend/node_modules/supertest/lib/test.js:342:13)
    at Test.assert (/home/rebelde/development/topsmile/backend/node_modules/supertest/lib/test.js:195:23)
    at localAssert (/home/rebelde/development/topsmile/backend/node_modules/supertest/lib/test.js:138:14)
    at Server.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/node_modules/supertest/lib/test.js:152:11)
    at Object.onceWrapper (node:events:633:28)
    at Server.emit (node:events:519:28)
    at emitCloseNT (node:net:2419:8)
    at processTicksAndRejections (node:internal/process/task_queues:89:21)</failure>
    </testcase>
    <testcase classname="Auth Routes Integration POST /api/auth/refresh should return 401 for invalid refresh token" name="Auth Routes Integration POST /api/auth/refresh should return 401 for invalid refresh token" time="0.532">
    </testcase>
  </testsuite>
  <testsuite name="ProviderService" errors="0" failures="0" skipped="0" timestamp="2025-09-18T18:07:20" time="34.899" tests="42">
    <testcase classname="ProviderService createProvider should create a new provider successfully" name="ProviderService createProvider should create a new provider successfully" time="4.442">
    </testcase>
    <testcase classname="ProviderService createProvider should create provider with default working hours" name="ProviderService createProvider should create provider with default working hours" time="0.99">
    </testcase>
    <testcase classname="ProviderService createProvider should create provider with custom working hours" name="ProviderService createProvider should create provider with custom working hours" time="0.927">
    </testcase>
    <testcase classname="ProviderService createProvider should create provider linked to user account" name="ProviderService createProvider should create provider linked to user account" time="0.893">
    </testcase>
    <testcase classname="ProviderService createProvider should create provider with appointment types" name="ProviderService createProvider should create provider with appointment types" time="0.602">
    </testcase>
    <testcase classname="ProviderService createProvider should throw error for duplicate email in same clinic" name="ProviderService createProvider should throw error for duplicate email in same clinic" time="0.546">
    </testcase>
    <testcase classname="ProviderService createProvider should throw error for invalid clinic ID" name="ProviderService createProvider should throw error for invalid clinic ID" time="0.504">
    </testcase>
    <testcase classname="ProviderService createProvider should throw error for missing required fields" name="ProviderService createProvider should throw error for missing required fields" time="0.489">
    </testcase>
    <testcase classname="ProviderService createProvider should throw error for user from different clinic" name="ProviderService createProvider should throw error for user from different clinic" time="0.959">
    </testcase>
    <testcase classname="ProviderService createProvider should throw error for user already linked to another provider" name="ProviderService createProvider should throw error for user already linked to another provider" time="0.565">
    </testcase>
    <testcase classname="ProviderService getProviderById should return provider by ID with populated fields" name="ProviderService getProviderById should return provider by ID with populated fields" time="0.536">
    </testcase>
    <testcase classname="ProviderService getProviderById should return null for non-existent provider" name="ProviderService getProviderById should return null for non-existent provider" time="0.486">
    </testcase>
    <testcase classname="ProviderService getProviderById should throw error for invalid provider ID" name="ProviderService getProviderById should throw error for invalid provider ID" time="0.48">
    </testcase>
    <testcase classname="ProviderService updateProvider should update provider successfully" name="ProviderService updateProvider should update provider successfully" time="0.538">
    </testcase>
    <testcase classname="ProviderService updateProvider should update provider with user link" name="ProviderService updateProvider should update provider with user link" time="0.544">
    </testcase>
    <testcase classname="ProviderService updateProvider should update provider with appointment types" name="ProviderService updateProvider should update provider with appointment types" time="0.54">
    </testcase>
    <testcase classname="ProviderService updateProvider should return null for non-existent provider" name="ProviderService updateProvider should return null for non-existent provider" time="0.49">
    </testcase>
    <testcase classname="ProviderService updateProvider should throw error for duplicate email update" name="ProviderService updateProvider should throw error for duplicate email update" time="0.538">
    </testcase>
    <testcase classname="ProviderService deleteProvider should delete provider successfully (soft delete)" name="ProviderService deleteProvider should delete provider successfully (soft delete)" time="0.522">
    </testcase>
    <testcase classname="ProviderService deleteProvider should return false for non-existent provider" name="ProviderService deleteProvider should return false for non-existent provider" time="0.505">
    </testcase>
    <testcase classname="ProviderService deleteProvider should throw error for invalid provider ID" name="ProviderService deleteProvider should throw error for invalid provider ID" time="0.505">
    </testcase>
    <testcase classname="ProviderService searchProviders should search providers by name" name="ProviderService searchProviders should search providers by name" time="0.568">
    </testcase>
    <testcase classname="ProviderService searchProviders should search providers by email" name="ProviderService searchProviders should search providers by email" time="0.579">
    </testcase>
    <testcase classname="ProviderService searchProviders should search providers by specialty" name="ProviderService searchProviders should search providers by specialty" time="0.574">
    </testcase>
    <testcase classname="ProviderService searchProviders should filter by specialties array" name="ProviderService searchProviders should filter by specialties array" time="0.571">
    </testcase>
    <testcase classname="ProviderService searchProviders should return all providers when no search term" name="ProviderService searchProviders should return all providers when no search term" time="0.608">
    </testcase>
    <testcase classname="ProviderService searchProviders should paginate results" name="ProviderService searchProviders should paginate results" time="0.663">
    </testcase>
    <testcase classname="ProviderService searchProviders should sort results" name="ProviderService searchProviders should sort results" time="0.59">
    </testcase>
    <testcase classname="ProviderService getProvidersByClinic should return all active providers for clinic" name="ProviderService getProvidersByClinic should return all active providers for clinic" time="0.585">
    </testcase>
    <testcase classname="ProviderService getProvidersByClinic should return inactive providers when specified" name="ProviderService getProvidersByClinic should return inactive providers when specified" time="0.584">
    </testcase>
    <testcase classname="ProviderService getProvidersByClinic should throw error for invalid clinic ID" name="ProviderService getProvidersByClinic should throw error for invalid clinic ID" time="0.565">
    </testcase>
    <testcase classname="ProviderService updateWorkingHours should update working hours successfully" name="ProviderService updateWorkingHours should update working hours successfully" time="0.526">
    </testcase>
    <testcase classname="ProviderService updateWorkingHours should return null for non-existent provider" name="ProviderService updateWorkingHours should return null for non-existent provider" time="0.493">
    </testcase>
    <testcase classname="ProviderService updateAppointmentTypes should update appointment types successfully" name="ProviderService updateAppointmentTypes should update appointment types successfully" time="0.526">
    </testcase>
    <testcase classname="ProviderService updateAppointmentTypes should throw error for invalid appointment type ID" name="ProviderService updateAppointmentTypes should throw error for invalid appointment type ID" time="0.517">
    </testcase>
    <testcase classname="ProviderService getProviderStats should return correct provider statistics" name="ProviderService getProviderStats should return correct provider statistics" time="0.845">
    </testcase>
    <testcase classname="ProviderService getProviderStats should return specialty breakdown" name="ProviderService getProviderStats should return specialty breakdown" time="0.857">
    </testcase>
    <testcase classname="ProviderService getProviderStats should throw error for invalid clinic ID" name="ProviderService getProviderStats should throw error for invalid clinic ID" time="0.712">
    </testcase>
    <testcase classname="ProviderService reactivateProvider should reactivate inactive provider" name="ProviderService reactivateProvider should reactivate inactive provider" time="0.629">
    </testcase>
    <testcase classname="ProviderService reactivateProvider should throw error for non-existent provider" name="ProviderService reactivateProvider should throw error for non-existent provider" time="0.561">
    </testcase>
    <testcase classname="ProviderService reactivateProvider should throw error for active provider" name="ProviderService reactivateProvider should throw error for active provider" time="0.581">
    </testcase>
    <testcase classname="ProviderService reactivateProvider should throw error for duplicate email when reactivating" name="ProviderService reactivateProvider should throw error for duplicate email when reactivating" time="0.636">
    </testcase>
  </testsuite>
  <testsuite name="ContactService" errors="0" failures="0" skipped="0" timestamp="2025-09-18T18:07:55" time="31.859" tests="38">
    <testcase classname="ContactService createContact should create a new contact successfully" name="ContactService createContact should create a new contact successfully" time="4.006">
    </testcase>
    <testcase classname="ContactService createContact should create contact with default source" name="ContactService createContact should create contact with default source" time="1.223">
    </testcase>
    <testcase classname="ContactService createContact should update existing contact when email already exists" name="ContactService createContact should update existing contact when email already exists" time="1.406">
    </testcase>
    <testcase classname="ContactService createContactSafe should create new contact and return isNew true" name="ContactService createContactSafe should create new contact and return isNew true" time="1.315">
    </testcase>
    <testcase classname="ContactService createContactSafe should update existing contact and return isNew false" name="ContactService createContactSafe should update existing contact and return isNew false" time="0.524">
    </testcase>
    <testcase classname="ContactService createContactSafe should throw error for missing required fields" name="ContactService createContactSafe should throw error for missing required fields" time="0.541">
    </testcase>
    <testcase classname="ContactService createMultipleContacts should create multiple new contacts successfully" name="ContactService createMultipleContacts should create multiple new contacts successfully" time="0.504">
    </testcase>
    <testcase classname="ContactService createMultipleContacts should handle mix of new and existing contacts" name="ContactService createMultipleContacts should handle mix of new and existing contacts" time="0.52">
    </testcase>
    <testcase classname="ContactService createMultipleContacts should handle errors in batch creation" name="ContactService createMultipleContacts should handle errors in batch creation" time="0.491">
    </testcase>
    <testcase classname="ContactService getContactById should return contact by ID" name="ContactService getContactById should return contact by ID" time="0.498">
    </testcase>
    <testcase classname="ContactService getContactById should return null for non-existent contact" name="ContactService getContactById should return null for non-existent contact" time="0.482">
    </testcase>
    <testcase classname="ContactService getContactByEmail should return contact by email" name="ContactService getContactByEmail should return contact by email" time="0.506">
    </testcase>
    <testcase classname="ContactService getContactByEmail should handle email case insensitivity" name="ContactService getContactByEmail should handle email case insensitivity" time="0.508">
    </testcase>
    <testcase classname="ContactService getContactByEmail should throw error for empty email" name="ContactService getContactByEmail should throw error for empty email" time="0.478">
    </testcase>
    <testcase classname="ContactService getContacts should return all contacts with pagination" name="ContactService getContacts should return all contacts with pagination" time="0.51">
    </testcase>
    <testcase classname="ContactService getContacts should filter by status" name="ContactService getContacts should filter by status" time="0.512">
    </testcase>
    <testcase classname="ContactService getContacts should filter by source" name="ContactService getContacts should filter by source" time="0.516">
    </testcase>
    <testcase classname="ContactService getContacts should filter by date range" name="ContactService getContacts should filter by date range" time="0.506">
    </testcase>
    <testcase classname="ContactService getContacts should search by name" name="ContactService getContacts should search by name" time="0.503">
    </testcase>
    <testcase classname="ContactService getContacts should search by email" name="ContactService getContacts should search by email" time="0.506">
    </testcase>
    <testcase classname="ContactService getContacts should paginate results" name="ContactService getContacts should paginate results" time="0.506">
    </testcase>
    <testcase classname="ContactService getContacts should sort results" name="ContactService getContacts should sort results" time="0.503">
    </testcase>
    <testcase classname="ContactService updateContact should update contact successfully" name="ContactService updateContact should update contact successfully" time="0.479">
    </testcase>
    <testcase classname="ContactService updateContact should not update protected fields" name="ContactService updateContact should not update protected fields" time="0.476">
    </testcase>
    <testcase classname="ContactService updateContact should return null for non-existent contact" name="ContactService updateContact should return null for non-existent contact" time="0.475">
    </testcase>
    <testcase classname="ContactService updateContactStatus should update status for multiple contacts" name="ContactService updateContactStatus should update status for multiple contacts" time="0.489">
    </testcase>
    <testcase classname="ContactService updateContactStatus should update status and assign contact" name="ContactService updateContactStatus should update status and assign contact" time="0.493">
    </testcase>
    <testcase classname="ContactService deleteContact should delete contact successfully" name="ContactService deleteContact should delete contact successfully" time="0.506">
    </testcase>
    <testcase classname="ContactService deleteContact should return false for non-existent contact" name="ContactService deleteContact should return false for non-existent contact" time="0.765">
    </testcase>
    <testcase classname="ContactService softDeleteContact should soft delete contact successfully" name="ContactService softDeleteContact should soft delete contact successfully" time="0.631">
    </testcase>
    <testcase classname="ContactService softDeleteContact should return null for non-existent contact" name="ContactService softDeleteContact should return null for non-existent contact" time="0.483">
    </testcase>
    <testcase classname="ContactService getContactStats should return correct contact statistics" name="ContactService getContactStats should return correct contact statistics" time="0.54">
    </testcase>
    <testcase classname="ContactService getContactStats should return status breakdown" name="ContactService getContactStats should return status breakdown" time="0.524">
    </testcase>
    <testcase classname="ContactService getContactStats should return source breakdown" name="ContactService getContactStats should return source breakdown" time="0.518">
    </testcase>
    <testcase classname="ContactService findDuplicateContacts should find duplicate contacts by email" name="ContactService findDuplicateContacts should find duplicate contacts by email" time="0.501">
    </testcase>
    <testcase classname="ContactService findDuplicateContacts should return empty array when no duplicates" name="ContactService findDuplicateContacts should return empty array when no duplicates" time="0.506">
    </testcase>
    <testcase classname="ContactService mergeDuplicateContacts should merge duplicate contacts successfully" name="ContactService mergeDuplicateContacts should merge duplicate contacts successfully" time="0.508">
    </testcase>
    <testcase classname="ContactService mergeDuplicateContacts should throw error for non-existent primary contact" name="ContactService mergeDuplicateContacts should throw error for non-existent primary contact" time="0.477">
    </testcase>
  </testsuite>
  <testsuite name="AppointmentService" errors="0" failures="0" skipped="0" timestamp="2025-09-18T18:08:27" time="29.522" tests="21">
    <testcase classname="AppointmentService createAppointment should create a new appointment successfully" name="AppointmentService createAppointment should create a new appointment successfully" time="5.624">
    </testcase>
    <testcase classname="AppointmentService createAppointment should create appointment with reminders" name="AppointmentService createAppointment should create appointment with reminders" time="1.604">
    </testcase>
    <testcase classname="AppointmentService createAppointment should throw error for overlapping appointments" name="AppointmentService createAppointment should throw error for overlapping appointments" time="1.888">
    </testcase>
    <testcase classname="AppointmentService createAppointment should validate required fields" name="AppointmentService createAppointment should validate required fields" time="0.899">
    </testcase>
    <testcase classname="AppointmentService getAppointmentById should return appointment by ID" name="AppointmentService getAppointmentById should return appointment by ID" time="1.155">
    </testcase>
    <testcase classname="AppointmentService getAppointmentById should return null for non-existent appointment" name="AppointmentService getAppointmentById should return null for non-existent appointment" time="0.717">
    </testcase>
    <testcase classname="AppointmentService getAppointments should return appointments for clinic" name="AppointmentService getAppointments should return appointments for clinic" time="1.384">
    </testcase>
    <testcase classname="AppointmentService getAppointments should filter appointments by status" name="AppointmentService getAppointments should filter appointments by status" time="1.276">
    </testcase>
    <testcase classname="AppointmentService getAppointments should filter appointments by date range" name="AppointmentService getAppointments should filter appointments by date range" time="0.642">
    </testcase>
    <testcase classname="AppointmentService getAppointments should filter appointments by provider" name="AppointmentService getAppointments should filter appointments by provider" time="0.615">
    </testcase>
    <testcase classname="AppointmentService updateAppointment should update appointment successfully" name="AppointmentService updateAppointment should update appointment successfully" time="0.546">
    </testcase>
    <testcase classname="AppointmentService updateAppointment should update appointment time" name="AppointmentService updateAppointment should update appointment time" time="0.551">
    </testcase>
    <testcase classname="AppointmentService updateAppointment should return null for non-existent appointment" name="AppointmentService updateAppointment should return null for non-existent appointment" time="0.524">
    </testcase>
    <testcase classname="AppointmentService cancelAppointment should cancel appointment successfully" name="AppointmentService cancelAppointment should cancel appointment successfully" time="0.564">
    </testcase>
    <testcase classname="AppointmentService cancelAppointment should return null for non-existent appointment" name="AppointmentService cancelAppointment should return null for non-existent appointment" time="0.523">
    </testcase>
    <testcase classname="AppointmentService checkAvailability should return available time slots" name="AppointmentService checkAvailability should return available time slots" time="0.516">
    </testcase>
    <testcase classname="AppointmentService checkAvailability should exclude booked time slots" name="AppointmentService checkAvailability should exclude booked time slots" time="0.541">
    </testcase>
    <testcase classname="AppointmentService getAppointmentStats should return correct appointment statistics" name="AppointmentService getAppointmentStats should return correct appointment statistics" time="0.7">
    </testcase>
    <testcase classname="AppointmentService getAppointmentStats should return statistics for date range" name="AppointmentService getAppointmentStats should return statistics for date range" time="0.668">
    </testcase>
    <testcase classname="AppointmentService rescheduleAppointment should reschedule appointment successfully" name="AppointmentService rescheduleAppointment should reschedule appointment successfully" time="0.586">
    </testcase>
    <testcase classname="AppointmentService rescheduleAppointment should throw error for conflicting time slot" name="AppointmentService rescheduleAppointment should throw error for conflicting time slot" time="0.576">
    </testcase>
  </testsuite>
  <testsuite name="SchedulingService" errors="0" failures="0" skipped="0" timestamp="2025-09-18T18:08:57" time="24.742" tests="16">
    <testcase classname="SchedulingService createAppointment should create appointment successfully" name="SchedulingService createAppointment should create appointment successfully" time="4.713">
    </testcase>
    <testcase classname="SchedulingService createAppointment should return error for invalid appointment type" name="SchedulingService createAppointment should return error for invalid appointment type" time="2.001">
    </testcase>
    <testcase classname="SchedulingService createAppointment should return error for inactive provider" name="SchedulingService createAppointment should return error for inactive provider" time="1.51">
    </testcase>
    <testcase classname="SchedulingService createAppointment should return error for time conflict" name="SchedulingService createAppointment should return error for time conflict" time="1.753">
    </testcase>
    <testcase classname="SchedulingService rescheduleAppointment should reschedule appointment successfully" name="SchedulingService rescheduleAppointment should reschedule appointment successfully" time="1.441">
    </testcase>
    <testcase classname="SchedulingService rescheduleAppointment should return error for non-existent appointment" name="SchedulingService rescheduleAppointment should return error for non-existent appointment" time="0.666">
    </testcase>
    <testcase classname="SchedulingService cancelAppointment should cancel appointment successfully" name="SchedulingService cancelAppointment should cancel appointment successfully" time="0.991">
    </testcase>
    <testcase classname="SchedulingService cancelAppointment should prevent cancelling completed appointment" name="SchedulingService cancelAppointment should prevent cancelling completed appointment" time="1.061">
    </testcase>
    <testcase classname="SchedulingService getAvailableSlots should return available time slots" name="SchedulingService getAvailableSlots should return available time slots" time="0.545">
    </testcase>
    <testcase classname="SchedulingService getAvailableSlots should return empty array for non-existent appointment type" name="SchedulingService getAvailableSlots should return empty array for non-existent appointment type" time="0.53">
    </testcase>
    <testcase classname="SchedulingService getAvailableSlots should return empty array when no providers available" name="SchedulingService getAvailableSlots should return empty array when no providers available" time="0.533">
    </testcase>
    <testcase classname="SchedulingService getAppointments should return appointments within date range" name="SchedulingService getAppointments should return appointments within date range" time="0.714">
    </testcase>
    <testcase classname="SchedulingService getAppointments should filter by provider and status" name="SchedulingService getAppointments should filter by provider and status" time="0.674">
    </testcase>
    <testcase classname="SchedulingService getAppointmentConflicts should return no conflicts when slot is available" name="SchedulingService getAppointmentConflicts should return no conflicts when slot is available" time="0.543">
    </testcase>
    <testcase classname="SchedulingService getAppointmentConflicts should return conflicts when appointments overlap" name="SchedulingService getAppointmentConflicts should return conflicts when appointments overlap" time="0.588">
    </testcase>
    <testcase classname="SchedulingService getProviderUtilization should calculate provider utilization correctly" name="SchedulingService getProviderUtilization should calculate provider utilization correctly" time="0.601">
    </testcase>
  </testsuite>
  <testsuite name="PatientService" errors="0" failures="0" skipped="0" timestamp="2025-09-18T18:09:21" time="21.08" tests="22">
    <testcase classname="PatientService createPatient should create a new patient successfully" name="PatientService createPatient should create a new patient successfully" time="3.833">
    </testcase>
    <testcase classname="PatientService createPatient should create patient without optional fields" name="PatientService createPatient should create patient without optional fields" time="0.792">
    </testcase>
    <testcase classname="PatientService createPatient should throw error for duplicate phone" name="PatientService createPatient should throw error for duplicate phone" time="0.803">
    </testcase>
    <testcase classname="PatientService createPatient should validate required fields" name="PatientService createPatient should validate required fields" time="1.014">
    </testcase>
    <testcase classname="PatientService getPatientById should return patient by ID" name="PatientService getPatientById should return patient by ID" time="0.557">
    </testcase>
    <testcase classname="PatientService getPatientById should return null for non-existent patient" name="PatientService getPatientById should return null for non-existent patient" time="0.487">
    </testcase>
    <testcase classname="PatientService getPatientsByClinic should return all active patients for clinic" name="PatientService getPatientsByClinic should return all active patients for clinic" time="0.546">
    </testcase>
    <testcase classname="PatientService getPatientsByClinic should return inactive patients when specified" name="PatientService getPatientsByClinic should return inactive patients when specified" time="0.573">
    </testcase>
    <testcase classname="PatientService updatePatient should update patient successfully" name="PatientService updatePatient should update patient successfully" time="0.515">
    </testcase>
    <testcase classname="PatientService updatePatient should return null for non-existent patient" name="PatientService updatePatient should return null for non-existent patient" time="0.478">
    </testcase>
    <testcase classname="PatientService updatePatient should update medical history" name="PatientService updatePatient should update medical history" time="0.509">
    </testcase>
    <testcase classname="PatientService deletePatient should delete patient successfully" name="PatientService deletePatient should delete patient successfully" time="0.505">
    </testcase>
    <testcase classname="PatientService deletePatient should return false for non-existent patient" name="PatientService deletePatient should return false for non-existent patient" time="0.48">
    </testcase>
    <testcase classname="PatientService searchPatients should search patients by name" name="PatientService searchPatients should search patients by name" time="0.526">
    </testcase>
    <testcase classname="PatientService searchPatients should search patients by phone" name="PatientService searchPatients should search patients by phone" time="0.533">
    </testcase>
    <testcase classname="PatientService searchPatients should search patients by email" name="PatientService searchPatients should search patients by email" time="0.533">
    </testcase>
    <testcase classname="PatientService searchPatients should return empty array for no matches" name="PatientService searchPatients should return empty array for no matches" time="0.525">
    </testcase>
    <testcase classname="PatientService searchPatients should paginate results" name="PatientService searchPatients should paginate results" time="0.557">
    </testcase>
    <testcase classname="PatientService getPatientStats should return correct patient statistics" name="PatientService getPatientStats should return correct patient statistics" time="0.682">
    </testcase>
    <testcase classname="PatientService updateMedicalHistory should update medical history successfully" name="PatientService updateMedicalHistory should update medical history successfully" time="0.543">
    </testcase>
    <testcase classname="PatientService reactivatePatient should reactivate inactive patient" name="PatientService reactivatePatient should reactivate inactive patient" time="0.533">
    </testcase>
    <testcase classname="PatientService reactivatePatient should throw error for non-existent patient" name="PatientService reactivatePatient should throw error for non-existent patient" time="0.506">
    </testcase>
  </testsuite>
  <testsuite name="Performance Tests" errors="0" failures="0" skipped="0" timestamp="2025-09-18T18:09:42" time="17.829" tests="5">
    <testcase classname="Performance Tests Load Testing should handle multiple concurrent login requests" name="Performance Tests Load Testing should handle multiple concurrent login requests" time="5.637">
    </testcase>
    <testcase classname="Performance Tests Load Testing should handle rapid successive auth requests" name="Performance Tests Load Testing should handle rapid successive auth requests" time="0.802">
    </testcase>
    <testcase classname="Performance Tests Memory Usage should not have memory leaks with repeated requests" name="Performance Tests Memory Usage should not have memory leaks with repeated requests" time="1.429">
    </testcase>
    <testcase classname="Performance Tests Database Query Performance should handle database load efficiently" name="Performance Tests Database Query Performance should handle database load efficiently" time="5.029">
    </testcase>
    <testcase classname="Performance Tests Response Time Benchmarks should respond quickly to auth endpoints" name="Performance Tests Response Time Benchmarks should respond quickly to auth endpoints" time="0.513">
    </testcase>
  </testsuite>
  <testsuite name="AuthService" errors="0" failures="0" skipped="0" timestamp="2025-09-18T18:10:00" time="15.042" tests="11">
    <testcase classname="AuthService register should register a new user successfully" name="AuthService register should register a new user successfully" time="3.327">
    </testcase>
    <testcase classname="AuthService register should hash the password" name="AuthService register should hash the password" time="0.542">
    </testcase>
    <testcase classname="AuthService register should throw error for duplicate email" name="AuthService register should throw error for duplicate email" time="0.549">
    </testcase>
    <testcase classname="AuthService register should create clinic when clinic data is provided" name="AuthService register should create clinic when clinic data is provided" time="0.534">
    </testcase>
    <testcase classname="AuthService login should login user with correct credentials" name="AuthService login should login user with correct credentials" time="0.944">
    </testcase>
    <testcase classname="AuthService login should throw error for invalid email" name="AuthService login should throw error for invalid email" time="0.023">
    </testcase>
    <testcase classname="AuthService login should throw error for invalid password" name="AuthService login should throw error for invalid password" time="0.915">
    </testcase>
    <testcase classname="AuthService getUserById should return user by ID" name="AuthService getUserById should return user by ID" time="0.488">
    </testcase>
    <testcase classname="AuthService getUserById should throw error for non-existent user" name="AuthService getUserById should throw error for non-existent user" time="0.022">
    </testcase>
    <testcase classname="AuthService changePassword should change password successfully" name="AuthService changePassword should change password successfully" time="1.917">
    </testcase>
    <testcase classname="AuthService changePassword should throw error for incorrect current password" name="AuthService changePassword should throw error for incorrect current password" time="0.967">
    </testcase>
  </testsuite>
  <testsuite name="Error Boundary Tests" errors="0" failures="0" skipped="0" timestamp="2025-09-18T18:10:15" time="12.935" tests="6">
    <testcase classname="Error Boundary Tests Database Connection Failures should handle database disconnection gracefully" name="Error Boundary Tests Database Connection Failures should handle database disconnection gracefully" time="2.993">
    </testcase>
    <testcase classname="Error Boundary Tests Database Connection Failures should handle database connection timeout" name="Error Boundary Tests Database Connection Failures should handle database connection timeout" time="1.362">
    </testcase>
    <testcase classname="Error Boundary Tests External Service Failures should handle external API failures" name="Error Boundary Tests External Service Failures should handle external API failures" time="1.028">
    </testcase>
    <testcase classname="Error Boundary Tests Malformed Requests should handle malformed JSON" name="Error Boundary Tests Malformed Requests should handle malformed JSON" time="0.571">
    </testcase>
    <testcase classname="Error Boundary Tests Malformed Requests should handle oversized payloads" name="Error Boundary Tests Malformed Requests should handle oversized payloads" time="0.493">
    </testcase>
    <testcase classname="Error Boundary Tests Concurrent Request Handling should handle multiple concurrent requests" name="Error Boundary Tests Concurrent Request Handling should handle multiple concurrent requests" time="1.99">
    </testcase>
  </testsuite>
  <testsuite name="Security Tests" errors="0" failures="0" skipped="0" timestamp="2025-09-18T18:10:28" time="11.607" tests="7">
    <testcase classname="Security Tests Token Expiration should handle expired tokens" name="Security Tests Token Expiration should handle expired tokens" time="3.116">
    </testcase>
    <testcase classname="Security Tests Token Expiration should handle malformed tokens" name="Security Tests Token Expiration should handle malformed tokens" time="1.017">
    </testcase>
    <testcase classname="Security Tests Token Expiration should handle missing tokens" name="Security Tests Token Expiration should handle missing tokens" time="0.78">
    </testcase>
    <testcase classname="Security Tests Input Validation &amp; Sanitization should handle extremely long input strings" name="Security Tests Input Validation &amp; Sanitization should handle extremely long input strings" time="0.582">
    </testcase>
    <testcase classname="Security Tests Input Validation &amp; Sanitization should handle SQL injection attempts" name="Security Tests Input Validation &amp; Sanitization should handle SQL injection attempts" time="0.617">
    </testcase>
    <testcase classname="Security Tests Input Validation &amp; Sanitization should handle XSS attempts" name="Security Tests Input Validation &amp; Sanitization should handle XSS attempts" time="0.485">
    </testcase>
    <testcase classname="Security Tests Rate Limiting should handle rapid successive requests" name="Security Tests Rate Limiting should handle rapid successive requests" time="0.665">
    </testcase>
  </testsuite>
  <testsuite name="Database Setup Test" errors="0" failures="0" skipped="0" timestamp="2025-09-18T18:10:40" time="3.733" tests="1">
    <testcase classname="Database Setup Test should connect to database" name="Database Setup Test should connect to database" time="0.001">
    </testcase>
  </testsuite>
</testsuites>