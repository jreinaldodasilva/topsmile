<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="88" failures="26" errors="0" time="190.902">
  <testsuite name="Patient Routes Integration Tests" errors="0" failures="1" skipped="0" timestamp="2025-09-13T18:57:02" time="42.015" tests="23">
    <testcase classname="Patient Routes Integration Tests POST /api/patients should create a patient successfully" name="Patient Routes Integration Tests POST /api/patients should create a patient successfully" time="5.239">
    </testcase>
    <testcase classname="Patient Routes Integration Tests POST /api/patients should return 400 for invalid data" name="Patient Routes Integration Tests POST /api/patients should return 400 for invalid data" time="0.748">
    </testcase>
    <testcase classname="Patient Routes Integration Tests POST /api/patients should return 400 for duplicate phone in same clinic" name="Patient Routes Integration Tests POST /api/patients should return 400 for duplicate phone in same clinic" time="0.777">
    </testcase>
    <testcase classname="Patient Routes Integration Tests POST /api/patients should create patient with minimal required data" name="Patient Routes Integration Tests POST /api/patients should create patient with minimal required data" time="0.596">
    </testcase>
    <testcase classname="Patient Routes Integration Tests GET /api/patients should return paginated list of patients" name="Patient Routes Integration Tests GET /api/patients should return paginated list of patients" time="0.663">
    </testcase>
    <testcase classname="Patient Routes Integration Tests GET /api/patients should search patients by name" name="Patient Routes Integration Tests GET /api/patients should search patients by name" time="0.578">
    </testcase>
    <testcase classname="Patient Routes Integration Tests GET /api/patients should search patients by phone" name="Patient Routes Integration Tests GET /api/patients should search patients by phone" time="0.579">
    </testcase>
    <testcase classname="Patient Routes Integration Tests GET /api/patients should search patients by email" name="Patient Routes Integration Tests GET /api/patients should search patients by email" time="0.588">
    </testcase>
    <testcase classname="Patient Routes Integration Tests GET /api/patients should filter by status" name="Patient Routes Integration Tests GET /api/patients should filter by status" time="0.573">
    </testcase>
    <testcase classname="Patient Routes Integration Tests GET /api/patients should paginate results" name="Patient Routes Integration Tests GET /api/patients should paginate results" time="0.558">
    </testcase>
    <testcase classname="Patient Routes Integration Tests GET /api/patients should sort results" name="Patient Routes Integration Tests GET /api/patients should sort results" time="0.761">
    </testcase>
    <testcase classname="Patient Routes Integration Tests GET /api/patients/stats should return patient statistics" name="Patient Routes Integration Tests GET /api/patients/stats should return patient statistics" time="0.644">
    </testcase>
    <testcase classname="Patient Routes Integration Tests GET /api/patients/:id should return patient by ID" name="Patient Routes Integration Tests GET /api/patients/:id should return patient by ID" time="0.599">
    </testcase>
    <testcase classname="Patient Routes Integration Tests GET /api/patients/:id should return 404 for non-existent patient" name="Patient Routes Integration Tests GET /api/patients/:id should return 404 for non-existent patient" time="0.545">
    </testcase>
    <testcase classname="Patient Routes Integration Tests PATCH /api/patients/:id should update patient successfully" name="Patient Routes Integration Tests PATCH /api/patients/:id should update patient successfully" time="0.544">
    </testcase>
    <testcase classname="Patient Routes Integration Tests PATCH /api/patients/:id should return 404 for non-existent patient" name="Patient Routes Integration Tests PATCH /api/patients/:id should return 404 for non-existent patient" time="0.601">
    </testcase>
    <testcase classname="Patient Routes Integration Tests PATCH /api/patients/:id should return 400 for invalid data" name="Patient Routes Integration Tests PATCH /api/patients/:id should return 400 for invalid data" time="0.534">
    </testcase>
    <testcase classname="Patient Routes Integration Tests PATCH /api/patients/:id/medical-history should update medical history successfully" name="Patient Routes Integration Tests PATCH /api/patients/:id/medical-history should update medical history successfully" time="0.657">
    </testcase>
    <testcase classname="Patient Routes Integration Tests PATCH /api/patients/:id/medical-history should update partial medical history" name="Patient Routes Integration Tests PATCH /api/patients/:id/medical-history should update partial medical history" time="0.56">
    </testcase>
    <testcase classname="Patient Routes Integration Tests PATCH /api/patients/:id/reactivate should reactivate patient successfully" name="Patient Routes Integration Tests PATCH /api/patients/:id/reactivate should reactivate patient successfully" time="0.587">
    </testcase>
    <testcase classname="Patient Routes Integration Tests PATCH /api/patients/:id/reactivate should return 404 for active patient" name="Patient Routes Integration Tests PATCH /api/patients/:id/reactivate should return 404 for active patient" time="0.554">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 404
Received: 400
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientRoutes.test.ts:558:31)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Routes Integration Tests DELETE /api/patients/:id should delete patient successfully" name="Patient Routes Integration Tests DELETE /api/patients/:id should delete patient successfully" time="0.524">
    </testcase>
    <testcase classname="Patient Routes Integration Tests DELETE /api/patients/:id should return 404 for non-existent patient" name="Patient Routes Integration Tests DELETE /api/patients/:id should return 404 for non-existent patient" time="0.519">
    </testcase>
  </testsuite>
  <testsuite name="Auth Routes Integration" errors="0" failures="1" skipped="0" timestamp="2025-09-13T18:57:45" time="38.641" tests="13">
    <testcase classname="Auth Routes Integration POST /api/auth/register should register a new user successfully" name="Auth Routes Integration POST /api/auth/register should register a new user successfully" time="4.587">
    </testcase>
    <testcase classname="Auth Routes Integration POST /api/auth/register should return 400 for invalid data" name="Auth Routes Integration POST /api/auth/register should return 400 for invalid data" time="1.048">
    </testcase>
    <testcase classname="Auth Routes Integration POST /api/auth/register should return 400 for duplicate email" name="Auth Routes Integration POST /api/auth/register should return 400 for duplicate email" time="0.907">
    </testcase>
    <testcase classname="Auth Routes Integration POST /api/auth/login should login user successfully" name="Auth Routes Integration POST /api/auth/login should login user successfully" time="1.345">
    </testcase>
    <testcase classname="Auth Routes Integration POST /api/auth/login should return 400 for missing credentials" name="Auth Routes Integration POST /api/auth/login should return 400 for missing credentials" time="0.511">
    </testcase>
    <testcase classname="Auth Routes Integration POST /api/auth/login should return 401 for invalid credentials" name="Auth Routes Integration POST /api/auth/login should return 401 for invalid credentials" time="0.643">
    </testcase>
    <testcase classname="Auth Routes Integration GET /api/auth/me should return current user profile" name="Auth Routes Integration GET /api/auth/me should return current user profile" time="0.585">
      <failure>Error: expect(received).toBeDefined()

Received: undefined
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/authRoutes.test.ts:139:39)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Auth Routes Integration GET /api/auth/me should return 401 for invalid token" name="Auth Routes Integration GET /api/auth/me should return 401 for invalid token" time="0.609">
    </testcase>
    <testcase classname="Auth Routes Integration PATCH /api/auth/change-password should change password successfully" name="Auth Routes Integration PATCH /api/auth/change-password should change password successfully" time="1.649">
    </testcase>
    <testcase classname="Auth Routes Integration PATCH /api/auth/change-password should return 400 for invalid new password" name="Auth Routes Integration PATCH /api/auth/change-password should return 400 for invalid new password" time="0.567">
    </testcase>
    <testcase classname="Auth Routes Integration POST /api/auth/logout should logout user successfully" name="Auth Routes Integration POST /api/auth/logout should logout user successfully" time="0.52">
    </testcase>
    <testcase classname="Auth Routes Integration POST /api/auth/refresh should refresh access token successfully" name="Auth Routes Integration POST /api/auth/refresh should refresh access token successfully" time="1.281">
    </testcase>
    <testcase classname="Auth Routes Integration POST /api/auth/refresh should return 401 for invalid refresh token" name="Auth Routes Integration POST /api/auth/refresh should return 401 for invalid refresh token" time="0.679">
    </testcase>
  </testsuite>
  <testsuite name="Patient Portal Integration Tests" errors="0" failures="19" skipped="0" timestamp="2025-09-13T18:58:23" time="18.808" tests="22">
    <testcase classname="Patient Portal Integration Tests should register a new patient user" name="Patient Portal Integration Tests should register a new patient user" time="3.787">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 200
Received: 400
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:42:28)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should login patient user and return access token" name="Patient Portal Integration Tests should login patient user and return access token" time="1.109">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 200
Received: 400
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:53:28)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should get patient user info with valid token" name="Patient Portal Integration Tests should get patient user info with valid token" time="0.46">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 200
Received: 401
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:63:28)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should get upcoming appointments for patient" name="Patient Portal Integration Tests should get upcoming appointments for patient" time="1.156">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 200
Received: 401
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:73:28)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle invalid login credentials" name="Patient Portal Integration Tests should handle invalid login credentials" time="0.151">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 401
Received: 400
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:85:28)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should logout patient user successfully" name="Patient Portal Integration Tests should logout patient user successfully" time="0.118">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 200
Received: 401
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:93:28)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should reject requests with invalid token" name="Patient Portal Integration Tests should reject requests with invalid token" time="0.175">
    </testcase>
    <testcase classname="Patient Portal Integration Tests should reject requests without token" name="Patient Portal Integration Tests should reject requests without token" time="0.157">
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle appointment booking with valid data" name="Patient Portal Integration Tests should handle appointment booking with valid data" time="0.111">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 201
Received: 401
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:127:28)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle appointment cancellation" name="Patient Portal Integration Tests should handle appointment cancellation" time="0.189">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 200
Received: 401
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:139:31)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle patient profile updates" name="Patient Portal Integration Tests should handle patient profile updates" time="0.158">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 200
Received: 404
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:172:28)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle password reset request" name="Patient Portal Integration Tests should handle password reset request" time="0.169">
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle rate limiting on auth endpoints" name="Patient Portal Integration Tests should handle rate limiting on auth endpoints" time="0.323">
      <failure>Error: expect(received).toBeGreaterThan(expected)

Expected: &gt; 0
Received:   0
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:202:41)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle concurrent session management" name="Patient Portal Integration Tests should handle concurrent session management" time="0.167">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 200
Received: 400
    at /home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:223:30
    at Array.forEach (&lt;anonymous&gt;)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:222:18)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle appointment rescheduling" name="Patient Portal Integration Tests should handle appointment rescheduling" time="0.142">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 200
Received: 401
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:249:31)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle patient medical history retrieval" name="Patient Portal Integration Tests should handle patient medical history retrieval" time="0.145">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 200
Received: 401
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:273:28)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle appointment type listing" name="Patient Portal Integration Tests should handle appointment type listing" time="0.157">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 200
Received: 401
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:282:28)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle provider availability checking" name="Patient Portal Integration Tests should handle provider availability checking" time="0.106">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 200
Received: 401
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:299:28)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle error responses gracefully" name="Patient Portal Integration Tests should handle error responses gracefully" time="0.049">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 404
Received: 401
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:308:28)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle CORS headers properly" name="Patient Portal Integration Tests should handle CORS headers properly" time="0.042">
      <failure>Error: expect(received).toBeDefined()

Received: undefined
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:320:56)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle large request payloads" name="Patient Portal Integration Tests should handle large request payloads" time="0.047">
      <failure>Error: expect(received).toContain(expected) // indexOf

Expected value: 401
Received array: [200, 201, 400, 413]
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:341:34)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Patient Portal Integration Tests should handle database connection errors gracefully" name="Patient Portal Integration Tests should handle database connection errors gracefully" time="0.046">
      <failure>Error: expect(received).toContain(expected) // indexOf

Expected value: 401
Received array: [200, 500]
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/patientPortal.test.ts:353:24)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
  </testsuite>
  <testsuite name="Error Boundary Tests" errors="0" failures="1" skipped="0" timestamp="2025-09-13T18:58:42" time="15.941" tests="6">
    <testcase classname="Error Boundary Tests Database Connection Failures should handle database disconnection gracefully" name="Error Boundary Tests Database Connection Failures should handle database disconnection gracefully" time="4.1">
    </testcase>
    <testcase classname="Error Boundary Tests Database Connection Failures should handle database connection timeout" name="Error Boundary Tests Database Connection Failures should handle database connection timeout" time="1.201">
    </testcase>
    <testcase classname="Error Boundary Tests External Service Failures should handle external API failures" name="Error Boundary Tests External Service Failures should handle external API failures" time="1.116">
    </testcase>
    <testcase classname="Error Boundary Tests Malformed Requests should handle malformed JSON" name="Error Boundary Tests Malformed Requests should handle malformed JSON" time="0.483">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: false
Received: undefined
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/errorBoundary.test.ts:76:37)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Error Boundary Tests Malformed Requests should handle oversized payloads" name="Error Boundary Tests Malformed Requests should handle oversized payloads" time="0.512">
    </testcase>
    <testcase classname="Error Boundary Tests Concurrent Request Handling should handle multiple concurrent requests" name="Error Boundary Tests Concurrent Request Handling should handle multiple concurrent requests" time="2.053">
    </testcase>
  </testsuite>
  <testsuite name="Performance Tests" errors="0" failures="1" skipped="0" timestamp="2025-09-13T18:58:58" time="22.119" tests="5">
    <testcase classname="Performance Tests Load Testing should handle multiple concurrent login requests" name="Performance Tests Load Testing should handle multiple concurrent login requests" time="6.698">
    </testcase>
    <testcase classname="Performance Tests Load Testing should handle rapid successive auth requests" name="Performance Tests Load Testing should handle rapid successive auth requests" time="1.085">
    </testcase>
    <testcase classname="Performance Tests Memory Usage should not have memory leaks with repeated requests" name="Performance Tests Memory Usage should not have memory leaks with repeated requests" time="1.826">
    </testcase>
    <testcase classname="Performance Tests Database Query Performance should handle database load efficiently" name="Performance Tests Database Query Performance should handle database load efficiently" time="5.521">
      <failure>Error: expect(received).toBeLessThan(expected)

Expected: &lt; 5000
Received:   5026
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/integration/performance.test.ts:118:24)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Performance Tests Response Time Benchmarks should respond quickly to auth endpoints" name="Performance Tests Response Time Benchmarks should respond quickly to auth endpoints" time="0.59">
    </testcase>
  </testsuite>
  <testsuite name="AuthService" errors="0" failures="3" skipped="0" timestamp="2025-09-13T18:59:21" time="18.427" tests="11">
    <testcase classname="AuthService register should register a new user successfully" name="AuthService register should register a new user successfully" time="3.466">
    </testcase>
    <testcase classname="AuthService register should hash the password" name="AuthService register should hash the password" time="0.577">
    </testcase>
    <testcase classname="AuthService register should throw error for duplicate email" name="AuthService register should throw error for duplicate email" time="0.567">
    </testcase>
    <testcase classname="AuthService register should create clinic when clinic data is provided" name="AuthService register should create clinic when clinic data is provided" time="0.566">
    </testcase>
    <testcase classname="AuthService login should login user with correct credentials" name="AuthService login should login user with correct credentials" time="1.04">
    </testcase>
    <testcase classname="AuthService login should throw error for invalid email" name="AuthService login should throw error for invalid email" time="0.033">
      <failure>Error: expect(received).rejects.toThrow(expected)

Expected substring: &quot;E-mail ou senha inválidos&quot;
Received message:   &quot;Credenciais inválidas&quot;

      418 |             if (!user) {
      419 |                 // Use same message for both cases to prevent user enumeration
    &gt; 420 |                 throw new UnauthorizedError(&apos;Credenciais inválidas&apos;);
          |                       ^
      421 |             }
      422 |
      423 |             // Check if account is locked

      at AuthService.login (src/services/authService.ts:420:23)
      at Object.&lt;anonymous&gt; (tests/unit/services/authService.test.ts:105:7)
    at Object.toThrow (/home/rebelde/development/topsmile/backend/node_modules/expect/build/index.js:218:22)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/unit/services/authService.test.ts:105:58)
    at Promise.then.completed (/home/rebelde/development/topsmile/backend/node_modules/jest-circus/build/utils.js:298:28)
    at new Promise (&lt;anonymous&gt;)
    at callAsyncCircusFn (/home/rebelde/development/topsmile/backend/node_modules/jest-circus/build/utils.js:231:10)
    at _callCircusTest (/home/rebelde/development/topsmile/backend/node_modules/jest-circus/build/run.js:316:40)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
    at _runTest (/home/rebelde/development/topsmile/backend/node_modules/jest-circus/build/run.js:252:3)
    at _runTestsForDescribeBlock (/home/rebelde/development/topsmile/backend/node_modules/jest-circus/build/run.js:126:9)
    at _runTestsForDescribeBlock (/home/rebelde/development/topsmile/backend/node_modules/jest-circus/build/run.js:121:9)
    at _runTestsForDescribeBlock (/home/rebelde/development/topsmile/backend/node_modules/jest-circus/build/run.js:121:9)
    at run (/home/rebelde/development/topsmile/backend/node_modules/jest-circus/build/run.js:71:3)
    at runAndTransformResultsToJestFormat (/home/rebelde/development/topsmile/backend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
    at jestAdapter (/home/rebelde/development/topsmile/backend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
    at runTestInternal (/home/rebelde/development/topsmile/backend/node_modules/jest-runner/build/runTest.js:367:16)
    at runTest (/home/rebelde/development/topsmile/backend/node_modules/jest-runner/build/runTest.js:444:34)</failure>
    </testcase>
    <testcase classname="AuthService login should throw error for invalid password" name="AuthService login should throw error for invalid password" time="1.062">
      <failure>Error: expect(received).rejects.toThrow(expected)

Expected substring: &quot;E-mail ou senha inválidos&quot;
Received message:   &quot;Credenciais inválidas&quot;

      430 |                 // Increment login attempts on failed password
      431 |                 await user.incLoginAttempts();
    &gt; 432 |                 throw new UnauthorizedError(&apos;Credenciais inválidas&apos;);
          |                       ^
      433 |             }
      434 |
      435 |             if (!user.isActive) {

      at AuthService.login (src/services/authService.ts:432:23)
      at Object.&lt;anonymous&gt; (tests/unit/services/authService.test.ts:122:7)
    at Object.toThrow (/home/rebelde/development/topsmile/backend/node_modules/expect/build/index.js:218:22)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/unit/services/authService.test.ts:122:58)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="AuthService getUserById should return user by ID" name="AuthService getUserById should return user by ID" time="0.542">
    </testcase>
    <testcase classname="AuthService getUserById should return null for non-existent user" name="AuthService getUserById should return null for non-existent user" time="0.022">
      <failure>Error: Usuário not found
    at AuthService.getUserById (/home/rebelde/development/topsmile/backend/src/services/authService.ts:492:23)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
    at Object.&lt;anonymous&gt; (/home/rebelde/development/topsmile/backend/tests/unit/services/authService.test.ts:145:20)</failure>
    </testcase>
    <testcase classname="AuthService changePassword should change password successfully" name="AuthService changePassword should change password successfully" time="2.081">
    </testcase>
    <testcase classname="AuthService changePassword should throw error for incorrect current password" name="AuthService changePassword should throw error for incorrect current password" time="1.029">
    </testcase>
  </testsuite>
  <testsuite name="Security Tests" errors="0" failures="0" skipped="0" timestamp="2025-09-13T18:59:39" time="16.051" tests="7">
    <testcase classname="Security Tests Token Expiration should handle expired tokens" name="Security Tests Token Expiration should handle expired tokens" time="4.471">
    </testcase>
    <testcase classname="Security Tests Token Expiration should handle malformed tokens" name="Security Tests Token Expiration should handle malformed tokens" time="0.716">
    </testcase>
    <testcase classname="Security Tests Token Expiration should handle missing tokens" name="Security Tests Token Expiration should handle missing tokens" time="0.652">
    </testcase>
    <testcase classname="Security Tests Input Validation &amp; Sanitization should handle extremely long input strings" name="Security Tests Input Validation &amp; Sanitization should handle extremely long input strings" time="0.693">
    </testcase>
    <testcase classname="Security Tests Input Validation &amp; Sanitization should handle SQL injection attempts" name="Security Tests Input Validation &amp; Sanitization should handle SQL injection attempts" time="0.551">
    </testcase>
    <testcase classname="Security Tests Input Validation &amp; Sanitization should handle XSS attempts" name="Security Tests Input Validation &amp; Sanitization should handle XSS attempts" time="0.532">
    </testcase>
    <testcase classname="Security Tests Rate Limiting should handle rapid successive requests" name="Security Tests Rate Limiting should handle rapid successive requests" time="0.806">
    </testcase>
  </testsuite>
  <testsuite name="Database Setup Test" errors="0" failures="0" skipped="0" timestamp="2025-09-13T18:59:55" time="4.285" tests="1">
    <testcase classname="Database Setup Test should connect to database" name="Database Setup Test should connect to database" time="0.002">
    </testcase>
  </testsuite>
</testsuites>